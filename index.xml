<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitHub Copilot Patterns &amp; Exercises</title><link>/</link><description>Recent content on GitHub Copilot Patterns &amp; Exercises</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>/CONTRIBUTING/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/CONTRIBUTING/</guid><description>Contributing to GitHub Copilot Patterns &amp;amp; Exercises # The goal of the GitHub Copilot Patterns &amp;amp; Exercises Working Group is to collect, document, and publish best practices for GitHub Copilot Patterns &amp;amp; Exercises. To ensure they are easy to understand, evaluate, and apply, we present them in a specific structure.
We welcome your participation, whether you make minor or major contributions, to help this working group function actively.
How to Contribute # Please consider contributing to GitHub Copilot Patterns &amp;amp; Exercises.</description></item><item><title/><link>/menu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menu/</guid><description>About
Introduction Contributing to the Project General
Code completion Comment to code Code to comment Quick Q&amp;amp;A Regular expression Language translation Type hinting Code to document Object generation from structured data Showing examples Client Side Tips
Copilot snippet handling GitHub Copilot Shortcuts Go to definition Pin the files you need Design Patterns
AI readable naming convention Consistent coding style High-level architecture first Working on small chunks Context-less Architecture Eliminating a tiny OSS dependency Collaboration</description></item><item><title>AI friendly documentation</title><link>/collaboration/ai-friendly-documentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/collaboration/ai-friendly-documentation/</guid><description>AI-friendly documentation # Description # In the era of GitHub Copilot, an AI powered coding assistance tool, having easily accessible documents in text format becomes crucial. In the AI era, files such as Infrastructure as Code, database table specifications, test requirements, and more have the potential to be instantly transformed into actual code. Rather than dealing with complex Excel, PowerPoint files, PDFs, or image formats, AI will be able to assist your coding efforts collaboratively through text-based documents.</description></item><item><title>AI readable naming convention</title><link>/design-pattern/ai-readable-naming-convention/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/design-pattern/ai-readable-naming-convention/</guid><description>AI readable naming convention # Description # The AI readable naming convention focuses on the way we name variables and functions in our code to make them more readable by AI tools like GitHub Copilot. By avoiding generic and common programming names and embracing specific, descriptive names, we create code that both human developers and AI models which powers Copilot, can easily comprehend.
For example, an engineer creating a library system may use generic words such as &amp;ldquo;dictionary&amp;rdquo;, &amp;ldquo;library&amp;rdquo;, and &amp;ldquo;stack&amp;rdquo; for system variable names and function names.</description></item><item><title>Asking with open-ended questions</title><link>/refactoring/asking-with-open-ended-questions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/refactoring/asking-with-open-ended-questions/</guid><description>Asking with Open-Ended Questions # Description # Refactoring is often a complex process. It is not necessarily about what is right and what is wrong, but about understanding the basic concepts and potential improvements. using open questions in GitHub Copilot, developers can work on improving code in a more thoughtful way with the help of GitHub Copilot GitHub Copilot can help developers work on code improvements in a more thoughtful way.</description></item><item><title>Coaching on Prompts and Code Generating Process</title><link>/collaboration/coaching-on-prompts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/collaboration/coaching-on-prompts/</guid><description>Coaching on Prompts and Code Generating Process # While this sounds reasonable, it is not a systematic or established pattern.
Description # Using an AI tool like GitHub Copilot can make the output look cleaner than it should. Code that looks perfect when you review it may actually be inefficient in the generation process or missing something important. Coaching on the generative process becomes essential to ensure that developers are aware of potential pitfalls and can create efficient and accurate code.</description></item><item><title>Code Completion</title><link>/general/code-completion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/general/code-completion/</guid><description>Code Completion # Description # One of the simplest uses of GitHub Copilot is code completion. Code completion enhances developer productivity by offering potential code snippets as the developer is typing. For example, imagine defining a function in JavaScript. As you input the code below, GitHub Copilot will suggest potential code that could be used inside the function, such as the following code.
Example # Input Code # function calculateSum(a, b) { // Enter your code here } Result Suggested by Copilot # function calculateSum(a, b) { // Enter your code here const sum = a + b; return sum; } Exerecise # Exercise 1: Complete the calculateSum(a, b) function by utilizing GitHub Copilot&amp;rsquo;s suggestions.</description></item><item><title>Code to Comment</title><link>/general/code-to-comment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/general/code-to-comment/</guid><description>Code to Comment: Generating Comments from Code # Description # GitHub Copilot can generate comments from code. When existing code lacks sufficient comments, or to assist other developers in understanding the code, GitHub Copilot can automatically generate explanations in comment form. The following sample demonstrates the Sieve of Eratosthenes algorithm to list prime numbers less than a given number. While this code does not contain comments, GitHub Copilot can create comments to describe the code&amp;rsquo;s functionality.</description></item><item><title>Code to Document</title><link>/general/code-to-document/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/general/code-to-document/</guid><description>Code to Document # Description # Chat-based AI tools can be used to automatically generate descriptions as well as longer texts such as documentation. For example, GitHub Copilot Chat can be leveraged to generate a full code synopsis, API documentation, and even output the entire code with it embedded within the code.
Sample Code # The following is a code snippet written for a Ruby on Rails Controller.
class RecipesController &amp;lt; ApplicationController before_action :set_recipe, only: [:show, :edit, :update, :destroy] # GET /recipes # GET /recipes.</description></item><item><title>Comment to Code</title><link>/general/comment-to-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/general/comment-to-code/</guid><description>Comment to Code Generation # Description # GitHub Copilot is capable of generating new code based on the specific text provided by a developer. By defining conditions in the form of comments, GitHub Copilot can create code that responds to the requirements.
Example # Here&amp;rsquo;s a way to instruct GitHub Copilot to create a function through comments:
// Function name: calculateAverage // Function arguments: numbers (array) // Return type of the function: number Based on these comments, Copilot might suggest the following code:</description></item><item><title>Consistent coding style</title><link>/design-pattern/consistent-coding-style/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/design-pattern/consistent-coding-style/</guid><description>Consistent coding style # Description # Consistent coding style is crucial in software development, as it not only enhances code readability but also leads to better suggestions from GitHub Copilot. Indentation, tabs, naming conventions, comment writing, language-specific abbreviations, and many other areas of coding style. By adhering to a uniform coding style and pattern, developers find it easier to follow excellent coding practices.
Example # Here&amp;rsquo;s a positive example of using clear function names and following the codebase pattern using snake_case:</description></item><item><title>Context-less Architecture</title><link>/design-pattern/context-less-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/design-pattern/context-less-architecture/</guid><description>Context-less Architecture # Loosely coupled architectures themselves are also recommended in many cases, and this pattern is consistent with that idea. However, more discussion is needed to tie the context of AI Powered development to the broader architecture discussion and justify it. By all means, let the discussion begin.
Description # Contextless architecture is a design pattern that limits coding to smaller, well-defined contexts within a system. By breaking complex programs into loosely coupled, independent components, this architecture improves maintainability, scalability, and flexibility.</description></item><item><title>Copilot Snippet Handling</title><link>/client-tips/copilot-snippet-handling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/client-tips/copilot-snippet-handling/</guid><description>Copilot Snippet Handling # While this is accurate as of August 2023, the situation may change as GitHub Copilot and the LLM behind it evolve. Always try to get the most up-to-date information from GitHub.
Description # GitHub Copilot, which utilizes OpenAI&amp;rsquo;s Large Language Models (LLM) to generate code, has a limitation on the number of tokens it can process. As of 2023, it doesn&amp;rsquo;t see all of the code that&amp;rsquo;s open in the editor and doesn&amp;rsquo;t receive every token.</description></item><item><title>Creating unit tests</title><link>/testing/creating-unit-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/testing/creating-unit-tests/</guid><description>Creating Unit Tests # Description # Testing is a fundamental part of the software development process, ensuring that the code meets its design and behaves as intended. The creation of unit tests, which test individual components of the system, can be both challenging and time-consuming. With GitHub Copilot, this process becomes more streamlined. Let&amp;rsquo;s explore how a developer named Alice leverages GitHub Copilot to write unit tests for her application, reducing her workload and boosting her efficiency.</description></item><item><title>Eliminating a tiny OSS dependency</title><link>/design-pattern/eliminating-a-tiny-oss-dependency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/design-pattern/eliminating-a-tiny-oss-dependency/</guid><description>Eliminating a tiny OSS dependency # This may be of limited applicability. As more cases are discovered, this maturity level will increase.
Description # Do you know about the left-pad issue? In 2016, the left-pad library was suspended from npm, causing well-known libraries that depended on it to cease working. left-pad is a simple JavaScript library that only fills the left side of a string with a specified number of characters, or spaces if not specified.</description></item><item><title>GitHub Copilot Shortcuts</title><link>/client-tips/github-copilot-shortcuts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/client-tips/github-copilot-shortcuts/</guid><description>GitHub Copilot Shortcuts # Description # GitHub Copilot provides developers with a set of keyboard shortcuts to accelerate the coding process. These shortcuts make the navigation and interaction with GitHub Copilot&amp;rsquo;s AI-driven suggestions more intuitive and efficient. In this pattern, we will explore the keyboard shortcuts that are essential for rapid code development with Copilot.
Example # For example, to accept a suggestion from Copilot, you can simply press the TAB key.</description></item><item><title>Go to definition</title><link>/client-tips/go-to-definition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/client-tips/go-to-definition/</guid><description>Go to definition # GitHub Copilot will not read all codebases as of August 2023, so there will be occasions when this technique will be necessary. On the other hand, there is a possibility that in the near future this technique will no longer be needed in GitHub Copilot, and this technique may be very limited.
Description # When working with a complex codebase, jumping between files or searching through layers of code to find the definition of a particular symbol can be cumbersome.</description></item><item><title>High-level Architecture First</title><link>/design-pattern/high-level-architecture-first/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/design-pattern/high-level-architecture-first/</guid><description>High-level Architecture First # Description # When developing a complex system, it is common to dive into the details of the code and lose sight of the overall architecture of the program. When this happens repeatedly, GitHub Copilot also loses sight of its overall architecture. This can lead to misunderstandings and errors. By designing the high-level architecture of the program first and commenting on the function and purpose of each piece of code during development, GitHub Copilot can better understand the context and make more precise suggestions.</description></item><item><title>Language Translation</title><link>/general/language-translation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/general/language-translation/</guid><description>Language Translation # Description # Sometimes, developers may need to translate code from one language to another, such as from Python to JavaScript or HTML to Markdown. This is where GitHub Copilot shines as a virtual aide. Imagine a scenario where a team is working on a multi-platform project, and they need to quickly convert a Python algorithm into JavaScript for web integration. GitHub Copilot&amp;rsquo;s Language Translation ability can save hours of manual translation, enabling seamless cross-language development.</description></item><item><title>Making the calculation part independent</title><link>/refactoring/making-the-calculation-part-independent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/refactoring/making-the-calculation-part-independent/</guid><description>Making the Calculation Part Independent # Description # In the rapidly evolving world of software development, relying on tools like GitHub Copilot can enhance the development process. However, current versions of large language models may have limitations when handling complex calculations. To address this, developers can refactor their code by moving the computation part to another function. This improves code maintainability, readability, and makes it easier to test and develop with AI tools.</description></item><item><title>Object Generation from Structured Data</title><link>/general/object-generation-from-structured-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/general/object-generation-from-structured-data/</guid><description>Object Generation from Structured Data # Description # Working with structured data is an everyday task for developers. Transforming data from formats like JSON into objects within your programming language allows for more robust and maintainable code. Imagine you have a list of users, and you want to convert this data into user objects within your application. GitHub Copilot can help you in this transformation process, turning a tedious task into a seamless exercise.</description></item><item><title>Pin the files you need</title><link>/client-tips/pin-the-file-you-need/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/client-tips/pin-the-file-you-need/</guid><description>Pin the files you need # Description # The effectiveness of GitHub Copilot depends on the context provided to it. GitHub Copilot searches through open tabs by text similarity, sending snippets to the Large Language Model (LLM), which itself is a complete black box. Therefore, we must be mindful of the context we want to provide. In programming, files such as declaration files (d.ts), test files, and interface files contain a wealth of context information.</description></item><item><title>Quick Q&amp;A</title><link>/general/quick-qna/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/general/quick-qna/</guid><description>Quick Q&amp;amp;A : A Technique for Fast Interaction with Copilot # Description # In the collaborative coding environment, quick interactions and clarifications are often key to efficient development. While GitHub has the &amp;ldquo;GitHub Copilot Chat&amp;rdquo; product for more structured and extensive conversations, the &amp;ldquo;Quick Q&amp;amp;A&amp;rdquo; technique serves as a lightweight alternative. It enables developers to rapidly engage with Copilot in the code editor for brief one-liner answers and insights. It&amp;rsquo;s not a distinct feature but a method that leverages commenting for quick interactions with Copilot, making it an agile and handy tool for on-the-spot guidance.</description></item><item><title>Regular Expression</title><link>/general/regular-expression/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/general/regular-expression/</guid><description>Regular Expression # Currently, LLMs do not have the ability to properly represent complex regular expressions. For complex ones, a human must provide supplemental input. On the other hand, it can be applied to simple regular expressions.
Description # GitHub Copilot can create a draft of regular expression patterns. Below, we&amp;rsquo;ll explain how to use regular expressions to search or extract strings. Two examples illustrate how GitHub Copilot can generate regular expressions through both input-output pattern and natural language pattern.</description></item><item><title>Showing Examples</title><link>/general/showing-examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/general/showing-examples/</guid><description>Showing Examples # Description # Using GitHub Copilot, developers can generate code based on provided examples. This can be incredibly useful when you expect the code that produces a specific output. In this pattern, we&amp;rsquo;ll explore how to create a Ruby on Rails model from a given example, such as generating JSON.
Example # The following sample illustrates how you can provide an example in comments and ask GitHub Copilot to generate Ruby on Rails code to create the corresponding model.</description></item><item><title>Specify how to generate test code</title><link>/testing/specify-test-valiation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/testing/specify-test-valiation/</guid><description>Specify How to Generate Test Code # Description # When it comes to testing, specific instructions can be a great way to make sure you&amp;rsquo;re covering all the necessary scenarios. Instead of giving vague instructions like &amp;ldquo;add unit tests,&amp;rdquo; you can provide concrete details about the testing frameworks and the number of cases you want to generate. This can be helpful in utilizing tools like GitHub Copilot, where specifying &amp;ldquo;use Junit and Mockito to add unit tests, testing at least 10 variations of valid and invalid input combinations&amp;rdquo; can yield a more accurate and comprehensive result.</description></item><item><title>Test only what is necessary</title><link>/testing/test-only-what-is-necessary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/testing/test-only-what-is-necessary/</guid><description>Test Only What is Necessary # There is no need to write unnecessary test cases, but it depends on the team what tests are needed. More specific discussion is needed to flesh this out as a pattern.
Description # In the era of rapid software development, writing efficient and useful tests is more important than ever, and when using GitHub Copilot, developers may generate a lot of test code to increase coverage.</description></item><item><title>Type Hinting</title><link>/general/type-hinting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/general/type-hinting/</guid><description>Type Hinting # Description # In the world of dynamic typing programming languages, developers often face challenges in understanding code, especially when working on complex systems. Type hinting adds a layer of clarity by explicitly declaring the expected data types. With GitHub Copilot, the integration of type hinting can increase the accuracy of code suggestions, empowering developers and GitHub Copilot to write code more efficiently.
Imagine you&amp;rsquo;re working on a project where functions are deeply nested, and tracking the types of variables becomes convoluted.</description></item><item><title>Working on small chunks</title><link>/design-pattern/working-on-small-chunk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/design-pattern/working-on-small-chunk/</guid><description>Working on Small Chunks # Description # Working on small chunks of code with less context can lead to improved Copilot&amp;rsquo;s output. Imagine you&amp;rsquo;re building a complex application with several interconnected components. Instead of trying to generate everything in one go, you break down the task into smaller parts, providing a confined context for Copilot. This approach not only streamlines the development process but also enhances the quality of the generated code.</description></item><item><title>Writing failure case first</title><link>/testing/writing-failure-case-first/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/testing/writing-failure-case-first/</guid><description>Writing Failure Case First # While this is important in development, it is necessary to find best practices on how this can be a generic pattern in many cases and how to get GitHub Copilot to suggest test cases appropriately.
Description # In a development cycle, writing test cases is an essential aspect. When working with GitHub Copilot, it becomes even more convenient as it reads your implementation and generates test cases accordingly.</description></item><item><title>Writing test cases in natural language first</title><link>/testing/writing-test-cases-in-natural-language-first/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/testing/writing-test-cases-in-natural-language-first/</guid><description>Writing Test Cases in Natural Language First # Description # When working with AI-powered code generation, like GitHub Copilot, expecting comprehensive test coverage without providing clear context to the AI is challenging. Instead of trying to write the test cases in code at that point, create natural language descriptions first. This will focus on improving the test coverage, ensuring that the generated code meets all the necessary criteria.
Example # Here&amp;rsquo;s an example of how you can write test cases in natural language for a multiplication function.</description></item><item><title>Writing test code before refactoring</title><link>/refactoring/writing-test-code-before-refactoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/refactoring/writing-test-code-before-refactoring/</guid><description>Writing test code before refactoring # Description # In the modern world of software development, refactoring can be seen as a fun and engaging task, especially with tools like GitHub Copilot at your disposal. It&amp;rsquo;s so easy to dive in and make changes, but without proper tests, even the most promising code modification can lead to unexpected results. This pattern emphasizes the importance of writing tests before refactoring code to ensure that the functionality remains consistent.</description></item></channel></rss>