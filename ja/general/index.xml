<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Generals on GitHub Copilot Patterns &amp; Exercises</title><link>/ja/general/</link><description>Recent content in Generals on GitHub Copilot Patterns &amp; Exercises</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="/ja/general/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub CopilotとのクイックQ&amp;A</title><link>/ja/general/quick-qna/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/quick-qna/</guid><description>GitHub CopilotとのクイックQ&amp;amp;A # Description # コーディングの際には、素早い対話と明確化が効率的な開発の鍵となることがよくあります。GitHubは &amp;ldquo;GitHub Copilot Chat&amp;rdquo; プロダクトを持っていますが、&amp;ldquo;クイックQ&amp;amp;A&amp;rdquo; テクニックは軽量な代替手段として機能します。これにより、開発者はコードエディタの中でキーボードのポジションを離れることなく GitHub Copilot と素早くやり取りし、簡潔な回答と洞察を得ることができます。これは独自の機能ではなく、GitHub Copilot との素早い対話のためにコメントを活用する方法で、敏捷性のための便利なツールとして役立ちます。
Example # クイックチャット技法を使用すると、コード内で直接質問をし、Copilotから簡潔な回答を得ることができます。
# me: このループを最適化する最良の方法は何ですか? # copilot: その後、GitHub Copilot が質問に回答します
# me: このループを最適化する最良の方法は何ですか? # copilot: ベクトル化されたアプローチを使用するか、中間結果をキャッシュすることを検討してください。 &amp;ldquo;q:&amp;rdquo; と &amp;ldquo;a:&amp;rdquo; だけでも構いません
// q: ミリ秒単位で現在の時刻を取得するにはどうすればよいですか? // a: 詳細な対話のために、役割を定義することができます:
# Roles: copilot # Python のエキスパートで 15 年以上の経験があります # Role: me # 中堅エンジニア # # me: このループを最適化する最良の方法は何ですか? # copilot: ベクトル化されたアプローチを使用するか、中間結果をキャッシュすることを検討してください。 Exercise # エクササイズ 1: &amp;ldquo;GitHub Copilot Chat&amp;rdquo; とエディタ内でのクイックチャットを使用して比較し、違いを考えてください。 エクササイズ 2: クイックチャットを使用して、3つの異なるコーディングの質問に対するワンライナーの回答を得てください。 エクササイズ 3: クイックチャット内で役割を定義し、文脈情報が Copilot の回答にどのように影響するかを観察してください。 Checklist for Further Learning # クイックチャットは GitHub Copilot Chat プロダクトとどう異なり、どちらが他方より優れている場合があるのですか?</description></item><item><title>コードからコメントの自動生成</title><link>/ja/general/code-to-comment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/code-to-comment/</guid><description>コードからコメントの自動生成 # Description # GitHub Copilot はコードからコメントを生成できます。既存のコードが十分なコメントを欠いている場合や、他の開発者がコードを理解するのを助けるために、GitHub Copilot を使ってコメント形式で自動的に説明を生成しましょう。
Example # 以下のサンプルは、与えられた数より小さい素数をリストするエラトステネスのふるいのアルゴリズムを示しています。このコードにはコメントが含まれていませんが、GitHub Copilotはコードの機能を説明するコメントを作成しています。
コメントなしのコードはこちらです:
def eratosthenes_sieve(n): primes = [] sieve = [True] * (n + 1) for p in range(2, n + 1): if sieve[p]: primes.append(p) for i in range(p * p, n + 1, p): sieve[i] = False return primes GitHub Copilotがそれを説明するコメントを追加する方法は次のとおりです:
# Write the description of the method here &amp;lt;- [Actual Prompt] # Input: n - the number of primes to return # Output: a list of the first n primes # Example: eratosthenes_sieve(5) -&amp;gt; [2, 3, 5, 7, 11] # Note: this is a very inefficient way to find primes, but it is easy to understand def eratosthenes_sieve(n): primes = [] sieve = [True] * (n + 1) for p in range(2, n + 1): if sieve[p]: primes.</description></item><item><title>コードからドキュメントへ</title><link>/ja/general/code-to-document/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/code-to-document/</guid><description>コードからドキュメントへ # Description # チャットベースのAIツールを使用することで、説明を自動生成するだけでなくドキュメントなどの長い文章を生成することができるようになります。例えば、GitHub Copilot Chat を活用することで、コード全体の概要説明や API ドキュメントを生成したり、またそれをコードの中に埋め込んだ状態でコードごと出力させる事ができるようになります。
Exampleコード # 以下は、Ruby on Railsのコントローラー向けのコードスニペットです。
class RecipesController &amp;lt; ApplicationController before_action :set_recipe, only: [:show, :edit, :update, :destroy] # GET /recipes # GET /recipes.json def index @recipes = Recipe.all end # GET /recipes/1 # GET /recipes/1.json def show end # GET /recipes/new def new @recipe = Recipe.new end # GET /recipes/1/edit def edit end # POST /recipes # POST /recipes.json def create @recipe = Recipe.</description></item><item><title>コード補完</title><link>/ja/general/code-completion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/code-completion/</guid><description> コード補完 # Description # GitHub Copilot の最もシンプルな使用法のひとつはコード補完です。コード補完は、開発者がタイピングする際に潜在的なコードスニペットを提供することで開発者の生産性を向上させます。例えば、JavaScript の関数を定義することを想像してみてください。以下のコードを入力する際に、GitHub Copilot は関数内で使用できる潜在的なコードを提案します。
Example # 入力コード # function calculateSum(a, b) { // Enter your code here } Copilot による提案結果 # function calculateSum(a, b) { // Enter your code here const sum = a + b; return sum; } Exercise # エクササイズ 1: GitHub Copilot の提案を活用して calculateSum(a, b) 関数を完成させます。異なるプロンプトや部分的なコード入力が Copilot による提案にどう影響するかを探求します。 Checklist for Further Learning # あなたのコードの出力は提供されたサンプルコードに似ていましたか? 出力されたコードは堅牢ですか? エラー処理は考慮されていますか? されていない場合どうすればよいですか? より正確なコードを書くためにどのようなプロンプトや文脈を追加できますか?</description></item><item><title>コメントからコードを生成</title><link>/ja/general/comment-to-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/comment-to-code/</guid><description>コメントからコードを生成 # Description # コードからコードを生成するコード補完のテクニックと同様に、最もベーシックな GitHub Copilot のテクニックです。GitHub Copilot は、開発者が提供した特定のテキストに基づいて新しいコードを生成することができます。コメントの形式で条件を定義することで、GitHub Copilot は要件に応じたコードを作成することができます。
Example # 以下は、コメントを通じて GitHub Copilot に関数を作成するよう指示する方法です:
// Function name: calculateAverage // Function arguments: numbers (array) // Return type of the function: number これらのコメントに基づいて、Copilot は次のようなコードを提案します:
function calculateAverage(numbers: number[]): number { // calculate the average of the array const sum = numbers.reduce((a, b) =&amp;gt; a + b); return sum / numbers.length; } Exercise # エクササイズ 1: 配列内の最大数値を計算する関数を作成するよう Copilot に指示するコメントを書いてください。以下の仕様を使用してください: // Function name: calculateMax // Function arguments: numbers (array) // Return type of the function: number エクササイズ 2: さまざまな数値セットで生成された関数をテストし、正しい最大値を返すかどうかを確認してください。 Checklist for Further Learning # 生成されたコードは、指定された条件に基づいていますか?</description></item><item><title>タイプヒンティング</title><link>/ja/general/type-hinting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/type-hinting/</guid><description> タイプヒンティング # Description # 動的型付けプログラミング言語の世界では、開発者は特に複雑なシステムでコードを理解する際に課題に直面することがよくあります。タイプヒンティングは、期待されるデータ型を明示的に宣言することで、明確さの層を追加します。 GitHub Copilot を使う際にもタイプヒンティングを使うことにより、コード提案の精度を高め、開発者と GitHub Copilot がより効率的にコードを書くのを支援します。
深くネストされた関数でプロジェクトに取り組んでいると想像してみてください。変数の型を追跡するのが複雑になります。タイプヒンティングの統合は、同僚の開発者にとってコードをより読みやすくすることにも繋がります。
Example # Python でタイプヒンティングを使用して関数を定義する方法は以下の通りです。
def add_numbers(a: int, b: int) -&amp;gt; int: return a + b GitHub Copilot はこれらのタイプヒンティングを認識し、それに応じてコード提案を生成します。
Exercise # エクササイズ 1: タイプヒンティングを使用して、2つの文字列パラメータを取り、それらの連結を返す関数を書いてください。 エクササイズ 2: プロジェクト内の既存のコード片をタイプヒンティングを含むように変換し、GitHub Copilot の提案の違いを観察してください。 エクササイズ 3: 複数のメソッドを持つ複雑なクラスを作成し、すべてのパラメータと戻り値のタイプヒンティングを使用してください。 Checklist for Further Learning # コードベース全体でタイプヒンティングを一貫して使用していますか? タイプヒンティングの過剰な使用の潜在的な欠点を考慮しましたか、そしてコード内での適切なバランスをどのように見つけるかですか?</description></item><item><title>プログラミング言語間の翻訳</title><link>/ja/general/language-translation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/language-translation/</guid><description>言語翻訳 # Description # 時に、開発者が Python から JavaScript や HTML から Markdown など、一つの言語から別の言語にコードを翻訳する必要があるかもしれません。チームがマルチプラットフォームプロジェクトに取り組んでいて、PythonのアルゴリズムをWeb 統合のために JavaScript に素早く変換する必要がある場合を想像してみてください。GitHub Copilot のプログラミング言語翻訳能力は、手動での翻訳にかかる時間を節約し、シームレスなクロス言語開発を可能にします。
Example # Python 関数を JavaScript に翻訳する例は以下の通りです:
Python コード:
def add(a, b): return a + b GitHub Copilotを使用すると、これを簡単にJavaScriptに翻訳できます:
function add(a, b) { return a + b; } Exercise # エクササイズ 1: GitHub Copilotを使用して、シンプルな HTML 構造を Markdown に翻訳してください。 エクササイズ 2: 与えられた Python 関数を、それに相当する Java に変換してください。 エクササイズ 3: C#の関数を書いて、それを GitHub Copilot を使用して Ruby に翻訳してください。 Checklist for Further Learning # GitHub Copilotは、特定の言語間でより正確な翻訳を提供するために、どのようにさらに最適化できますか?</description></item><item><title>構造化データからのオブジェクト生成</title><link>/ja/general/object-generation-from-structured-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/object-generation-from-structured-data/</guid><description> 構造化データからのオブジェクト生成 # Description # 開発者にとって、構造化データの取り扱いは日常的なタスクです。JSONなどの形式のデータをプログラミング言語内のオブジェクトに変換することで、堅牢で保守性の高いコードを作成できます。例えば、ユーザーのリストがあり、このデータをアプリケーション内のユーザーオブジェクトに変換したい場合を想像してみてください。GitHub Copilot は、この変換プロセスをサポートし、煩雑な作業を一瞬で終わる簡単な作業に変えてくれます。
Example # 以下は、与えられたJSONデータをユーザーオブジェクトのリストに変換するPythonの例です。
import json json_data = &amp;#39;[{&amp;#34;id&amp;#34;: &amp;#34;1&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Yuki Hattori&amp;#34;}, {&amp;#34;id&amp;#34;: &amp;#34;2&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;George Hattori&amp;#34;}]&amp;#39; users = json.loads(json_data) class User: def __init__(self, id, name): self.id = id self.name = name user_objects = [User(user[&amp;#39;id&amp;#39;], user[&amp;#39;name&amp;#39;]) for user in users] for user in user_objects: print(user.id, user.name) Exercise # エクササイズ 1: 異なる JSON 構造からオブジェクトを生成してみてください。例えば、ユーザーのアドレス情報を含むJSONなどです。 エクササイズ 2: JSON 内のデータが欠落しているようなエッジケースを取り扱ってみてください。コードが適切に処理されるようにしてください。 学習のためのチェックリスト # より複雑なデータ構造に適応するためにコードをどのように変更しますか? データをオブジェクトに変換する前に、どのような方法でデータの妥当性を確認できるでしょうか? このパターンを異なるプログラミング言語やフレームワークにどのように適用できますか?</description></item><item><title>正規表現</title><link>/ja/general/regular-expression/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/regular-expression/</guid><description>正規表現 # 現在のところ、LLMには複雑な正規表現を適切に表現する機能はありません。複雑なものについては、人間が補足的に入力しなければならないシーンが出てくるでしょう。一方で単純な正規表現には適用できます。
Description # GitHub Copilot は正規表現のパターンのドラフトを作成できます。以下では、文字列の検索や抽出に正規表現を使用する方法について説明します。2つの例を通して、GitHub Copilot が &amp;ldquo;入力/出力パターン&amp;rdquo; と &amp;ldquo;自然言語パターン&amp;rdquo; の両方で正規表現を生成する方法を示します。
Example # 入力/出力パターン # 最初に、入力と出力を記述することで、GitHub Copilot は正規表現のパターンを作成できます。
import re # Write a regular expression # - Input: &amp;#34;Hello World&amp;#34; # - Output: [&amp;#34;H&amp;#34;, &amp;#34;W&amp;#34;] regex 結果として以下のようなコードを得ることができます。
import re # Write a regular expression # - Input: &amp;#34;Hello World&amp;#34; # - Output: [&amp;#34;H&amp;#34;, &amp;#34;W&amp;#34;] regex = r&amp;#34;[A-Z]&amp;#34; matched = re.findall(regex, &amp;#34;Hello World&amp;#34;) 自然言語パターン # 次に、正規表現で達成したい内容を自然言語で提供します。
import re # Write a regular expression # - &amp;#34;I have 3 apples and 2 oranges&amp;#34; like string, extract only the numbers to make an array sentence 結果として以下のようなコードを得ることができます。</description></item><item><title>例示によるコード生成</title><link>/ja/general/showing-examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/showing-examples/</guid><description>例示によるコード生成 # Description # GitHub Copilotを使用して、開発者は提供された例に基づいてコードを生成できます。特定の出力を生成するコードが期待される場合、これは非常に便利です。このパターンでは、例としてJSONを生成するなど、Ruby on Rails のモデルを作成する方法を探ります。
Example # 以下のサンプルは、コメント内で例を提供し、GitHub Copilot に対応するモデルを作成する Ruby on Rails コードを生成するように頼む方法を示しています。
# 以下のJSONを作成するコード生成の例: # { # &amp;#34;name&amp;#34;: &amp;#34;John Smith&amp;#34;, # &amp;#34;age&amp;#34;: 30, # &amp;#34;description&amp;#34;: &amp;#34;これはサンプルの説明です。&amp;#34;, # &amp;#34;country&amp;#34;: &amp;#34;Japan&amp;#34;, # &amp;#34;title&amp;#34;: &amp;#34;Customer Success Architect&amp;#34;, # &amp;#34;email&amp;#34;: &amp;#34;johnsmith@example.com&amp;#34; # } rails g model users name:string age:integer description:text country:string title:string email:string Exercise # エクササイズ 1: 以下の例に基づいて、書籍のモデルを作成する Ruby on Rails のコードを生成してください。 { &amp;#34;title&amp;#34;: &amp;#34;Book&amp;#34;, &amp;#34;author&amp;#34;: &amp;#34;Jane Doe&amp;#34;, &amp;#34;price&amp;#34;: 19.</description></item></channel></rss>