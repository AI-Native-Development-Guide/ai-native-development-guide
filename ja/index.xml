<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitHub Copilot Patterns &amp; Exercises</title><link>/ja/</link><description>Recent content on GitHub Copilot Patterns &amp; Exercises</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="/ja/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>/ja/CONTRIBUTING/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/CONTRIBUTING/</guid><description>AIネイティブ開発ガイドに貢献する GitHub Copilot パターン&amp;amp;エクササイズ ワーキンググループの目標は、AIネイティブ開発のベストプラクティスを収集、文書化、および公開することです。ベストプラクティスを理解しやすく、評価しやすく、適用しやすくするために、私たちはそれらを特定の構造に符号化します。
このワーキンググループが活発に活動するために、小さな貢献でも大きな貢献でも、皆さんの参加を歓迎します。
コントリビューションをする方法 GitHub Copilot パターン&amp;amp;エクササイズへの貢献を検討している方へ、以下はどのように貢献できるかについての提案です。
意見を共有し、議論を促す: 新鮮な視点、興味深い考え、または初期の斬新なアイデアは、議論を引き起こし、予測できない結果を生み出すことがあります。AIネイティブ開発関連のトピックについていつでも Issues を作成して意見を共有するようにお願いします。 既存のパターンを読み、改善する: 始めるには、このリポジトリの既存のパターンや資料を読むことをお勧めします。誤解を招くフレーズやまずい文法を見つけましたか？コンテンツの誤り？GitHub Issue を作成するか、直接プルリクエストとして修正を提案してください。 パターンを使用していることを確認する: 複数の組織がパターンを使用していることを確認すると、そのパターンの関連性が高まり、他の採用者にこのパターンが実証済みであることを知らせることができます。公開されているパターンのいずれかを使用している場合は、そのパターンに既知のインスタンスとして組織をリストし、それ適用した際の経験について説明してください。 既存のパターンを翻訳する: あなたの地域でAIネイティブ開発の実践を導入する際、ほとんどのAIネイティブ開発のコンテンツが英語で利用可能であるため、言語の障壁が人々にとって問題になることがあります。そのため、あなたの地域/組織の人々が自分たちの言語でAIネイティブ開発を理解できるようにすることは大変価値があります。パターンを他の言語に翻訳する方法については、翻訳手順を参照してください。 オープンなプルリクエストをレビューする: パターンワーキンググループのすべての詳細を知らなくても、既存のプルリクエスト（特にパターン内容の変更を提案するもの）に対するフィードバックは、その著者にとって有益です。 AIネイティブ開発を学びたい人として、将来の読者の視点から意見を述べることができます。独自のAIネイティブ開発経験を持つ人として、著者と経験を共有することができます。 新しいパターンに貢献する: あなたができる主要な貢献は、経験したり知っているAIネイティブ開発のベストプラクティスを文書化することです。 このリポジトリのコンテンツには、異なる成熟度レベルが定義されています。初めての貢献者は、成熟度レベル1: 初期（構造化されていない経験報告や、欠けている部分を持つパターン）および2: 構造化（パターン形式に従い、基本的な文章表現の規則に従ったベストプラクティス）を目指すべきです。 パターンのアドボケートになる: さらに多くの人々が自分たちの視点と経験を寄せることで、パターンはより良くなり、より多くのトピックがカバーされます。同僚が斬新なAIネイティブ開発のベストプラクティスについて話してくれましたか？ぜひ彼/彼女を招待し、このリポジトリに貢献してもらいましょう！ 貢献のライセンス このリポジトリのコンテンツはCC-BY-SA-4.0でライセンスされています。このリポジトリへの貢献により、私たち（そして誰もが）あなたの貢献をそのライセンスに従って使用する権利を付与します。
貢献の謝辞 パターンの著者として自分自身をリストする場合、そのパターンを参照する際にあなたに言及する許可を得たものと見なします。
行動規範 まだ完全に正式化された行動規範はありませんが、すべての貢献者が互いに尊重し合い、このコミュニティをハラスメントや差別のない場に保つことを助けるよう期待しています。</description></item><item><title/><link>/ja/menu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/menu/</guid><description>About
ようこそ プロジェクトに貢献するには General
コード補完 コメントからコードを生成 コードからコメントの自動生成 GitHub CopilotとのクイックQ&amp;amp;A 正規表現 プログラミング言語間の翻訳 タイプヒンティング 構造化データからのオブジェクト生成 コードからドキュメントへ Client Side Tips
Copilot スニペットハンドリング GitHub Copilot ショートカット 定義に移動 便利なファイルのピン留め Design Patterns
AI が理解可能な命名規則 一貫性のあるコーディングスタイル ハイレベルアーキテクチャを先に 小さなコードチャンクで作業する コンテキストレス・アーキテクチャ 微細な OSS 依存関係の排除 Collaboration
AIフレンドリーなドキュメンテーション プロンプトとコード生成プロセスのコーチング Testing
ユニットテストの作成 テストコード生成の方法を指定する 失敗ケースを最初に書く 自然言語でテストケースを最初に記述する 必要な部分だけをテストする Refactoring
リファクタリング前にテストコードを書く 計算ロジックを独立させる オープン・クエスチョンで尋ねる Archived Version
English 🇬🇧 German 🇩🇪 Spanish 🇪🇸 French 🇫🇷 Italy 🇮🇹 Japanese 🇯🇵 Portuguese 🇵🇹 Chinese 🇨🇳 GitHub</description></item><item><title>AI が理解可能な命名規則</title><link>/ja/design-pattern/ai-readable-naming-convention/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/design-pattern/ai-readable-naming-convention/</guid><description>AIが読み取り可能な命名規則 Description AIが理解可能な命名規則のパターンは、GitHub Copilotのような AI ツールがもっと読みやすくするためにコード内の変数と関数の命名方法に焦点を当てます。一般的でありふれたプログラミング名や、x や y のような適当な命名を避け、具体的で説明的な名前を採用することで、人間の開発者と GitHub Copilot を動かすAIモデルの両方が容易に理解できるコードを作ります。
例えば、図書館システムを作るエンジニアは、システムの変数名や関数名に「辞書(=dictionary)」「ライブラリ(=library)」「本棚(=stack)」といった一般的な言葉を使うかもしれません。しかし、&amp;ldquo;dictionary&amp;quot;という名前を含む変数の本当の型が配列だったらどうでしょう。これはほんの一例ですが、GitHub Copilotはこうしたことが積み重なると間違った答えを提案することがあります。 さらに文脈を示す必要がある場合は、言語のタイプヒンティングを用いるか、コメントとして文脈を追加するのがよいでしょう。
このパターンに従うことで、GitHub Copilotの効果を高め、より正確なサジェストと開発者の速度向上につながります。
Example ここでは、異なる命名規則がコードの明快さと正確さにどのような影響を与えるかを示す3つの例を紹介します:
Ambiguous Naming:
# This may confuse whether &amp;#34;dictionary&amp;#34; refers to a book or a data type dictionary = Better Naming with Comments:
# sample list of dictionaries in the library, like &amp;#34;Oxford&amp;#34; and &amp;#34;Cambridge&amp;#34; library_dictionaries = [&amp;#34;Merriam-Webster&amp;#34;, &amp;#34;Oxford&amp;#34;, &amp;#34;Cambridge&amp;#34;] Specific Naming with Type Hinting:
from typing import List # A clear and specific variable name with type hinting list_of_dictionaries_in_library: List[str] = [&amp;#34;Merriam-Webster&amp;#34;, &amp;#34;Oxford&amp;#34;, &amp;#34;Cambridge&amp;#34;] Exercise エクササイズ 1: 現在のコードベースを見直し、非記述的な方法で名前が付けられている可能性のある変数や関数を特定します。それらをAIが読み取り可能な命名規則に従ってリネームしてみてください。 エクササイズ 2: 新しい命名パターンで GitHub Copilot を使用して実験し、変更前後の提案と精度を比較してみてください。 エクササイズ 3: この命名規則を念頭に置いて新しいコードを書いてみて、Copilotがコードにどのように反応するかを観察してみてください。 エクササイズ 4: チーム向けに AI の可読性に焦点を当てた命名規則ガイドラインを作成し、チームのコーディング標準に組み込んでみてください。 エクササイズ 5: チームにこれらの命名規則の使用を奨励し、全体のコードの可読性と GitHub Copilot の効果に対する影響を時間をかけて観察してみてください。 Further Learningのチェックリスト 人間の開発者とAIモデルの両方にコードをもっと読みやすくするにはどうすればいいですか?</description></item><item><title>AIフレンドリーなドキュメンテーション</title><link>/ja/collaboration/ai-friendly-documentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/collaboration/ai-friendly-documentation/</guid><description>AIフレンドリーなドキュメンテーション Description AI を用いたコーディング支援ツールである GitHub Copilotの時代には、テキストベースで AI が容易にアクセスできるドキュメントが重要です。AI の時代では、Infrastructure as Code、データベーステーブル仕様、テスト要件などのファイルは、即座に実際のコードに変換できる可能性を持っています。複雑なエクセル、パワーポイントファイル、PDF、画像形式ではなく、テキストベースのドキュメントによって AI があなたのコーディングを協力に支援することができるようにになります。
以下のファイルがテキストベースであるか確認します:
インフラストラクチャ定義 データベーステーブル定義 テスト仕様 Example 例えば、以下のようなマークダウンで書かれたテーブルがある場合、GitHub Copilot はマイグレーションファイルのベースを提供します。
# | No. | Item Name | Type | Length | Decimal | Required | Primary Key | Remarks | # | --- | -------------------- | --------------------------- | ------ | ------- | -------- | ----------- | ---------------------- | # | 1 | pass_document_id | integer | | | Y | Y | Document ID | # | 2 | checkout_id | integer | | | Y | Y | Unique Serial Number | # | .</description></item><item><title>Copilot スニペットハンドリング</title><link>/ja/client-tips/copilot-snippet-handling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/client-tips/copilot-snippet-handling/</guid><description>Copilot スニペットハンドリング {% hint style=&amp;ldquo;info&amp;rdquo; %} この情報は2023年8月現在のものですが、GitHub Copilotとその背後にあるLLMの進化に伴い、状況が変わる可能性があります。常にGitHubから最新の情報を得るようにしてください。 {% endhint %}
Description そして、GitHub Copilot は OpenAI の 大規模言語モデルを利用してコードを生成するため、トークンの数に制限があります。2023 年現在、GitHub Copilot はエディタで開いているコード全てを見ることができず、また AI もすべてのコードをトークンとして受け取るわけではありません。これは、ユーザーが GitHub Copilot に提供するコンテキストを慎重に制限する必要があることを意味しています。特筆すべきは、GitHub Copilot は外部リポジトリや GitHub.com / GitHub Enterprise Cloud に置かれたソースコードにはアクセスしていないということです。
GitHub Copilot が提案に使用するファイルは、主に現在開いているファイルとそれに隣接するタブファイル(基本的には同じファイル拡張子)です。 正確な提案をするためには、関連するファイルだけを開いておくことが不可欠です。 以下は、2023年8月時点のチェックリストです。 GitHub Copilot がスニペットとして含めるファイルの種類は将来変更される可能性がありますが、「不要なファイルを閉じる」などの実践は、GitHub Copilot を使用していない場合であっても、コーディングにプラスの影響を与える可能性があります。
参照する必要があるファイルを開く 不要なファイルを閉じる 参照したい 他の拡張子のファイル (例: .md, .csv) がある場合は、コピーしてコメントアウトする Example Pythonの関数を1つのタブで書いており、隣接するタブに似たような関数があるシナリオを考えてみましょう。GitHub Copilotはパターンを認識し、改善の提案を行うことができます。
# タブ 1 (隣接) def add_numbers(a, b): return a + b # タブ 2 def subtract_numbers(a, b): return a - b answer = substruct_numbers(1, 2) + add_numbers( # &amp;lt;GitHub Copilot will suggest the code by reading the tab 1 &amp;gt; Exercise エクササイズ 1: 複数のタブを開いてGitHub Copilotを試し、提案がどのようにされるかを観察してみてください。 エクササイズ 2: 特定のタブを閉じて、その動作がどのように変わるかを確認してみてください。 エクササイズ 3: 複雑なプロジェクトで Copilot へ送信されるコードの文脈をを減らして実験してみてください。これが提供される提案にどのように影響するか観察してみましょう。 Checklist for Further Learning Copilot に必要なコンテキストを最適に与えるには、どのような戦略を採用することができますか?</description></item><item><title>GitHub Copilot ショートカット</title><link>/ja/client-tips/github-copilot-shortcuts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/client-tips/github-copilot-shortcuts/</guid><description>GitHub Copilot ショートカット Description GitHub Copilot は、開発者にコーディングプロセスを加速させるためのキーボードショートカットを提供します。これらのショートカットは、GitHub Copilot のAIによる提案とのナビゲーションやインタラクションを直感的かつ効率的に行うのに役立ちます。このパターンでは、GitHub Copilot を使用した迅速なコード開発に不可欠なキーボードショートカットを探求します。
Example 例えば、GitHub Copilot からの提案を受け入れるには、TAB を押すだけで良いです。以下はいくつかの重要なショートカットのリストです:
提案を受け入れる: TAB 提案を拒否する: Esc 複数の提案を表示する: Ctrl + Enter 単語レベルで受け入れる: Ctrl + → 次の提案を見る: Alt + ] 前の提案を見る: Alt + [ インライン提案をトリガーする: Alt + / Labs 機能リストを表示する: Ctrl + Shift + Alt + e サイドバーを切り替える: Ctrl + Shift + a Exercise エクササイズ 1: 現在のプロジェクトで TAB を使って GitHub Copilot の提案を受け入れてみてください。 エクササイズ 2: Esc を押して提案を拒否してみてください。何が起きますか? エクササイズ 3: Ctrl + Enter を使用して組み合わせた提案を確認します。それらを探索し、有用なものを特定してみてください。 エクササイズ 4: Alt + ] と Alt + [ を使用して提案をナビゲートしてみてください。コード選択プロセスにどう影響しますか?</description></item><item><title>GitHub CopilotとのクイックQ&amp;A</title><link>/ja/general/quick-qna/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/quick-qna/</guid><description>GitHub CopilotとのクイックQ&amp;amp;A Description コーディングの際には、素早い対話と明確化が効率的な開発の鍵となることがよくあります。GitHubは &amp;ldquo;GitHub Copilot Chat&amp;rdquo; プロダクトを持っていますが、&amp;ldquo;クイックQ&amp;amp;A&amp;rdquo; テクニックは軽量な代替手段として機能します。これにより、開発者はコードエディタの中でキーボードのポジションを離れることなく GitHub Copilot と素早くやり取りし、簡潔な回答と洞察を得ることができます。これは独自の機能ではなく、GitHub Copilot との素早い対話のためにコメントを活用する方法で、敏捷性のための便利なツールとして役立ちます。
Example クイックチャット技法を使用すると、コード内で直接質問をし、Copilotから簡潔な回答を得ることができます。
# me: このループを最適化する最良の方法は何ですか? # copilot: その後、GitHub Copilot が質問に回答します
# me: このループを最適化する最良の方法は何ですか? # copilot: ベクトル化されたアプローチを使用するか、中間結果をキャッシュすることを検討してください。 &amp;ldquo;q:&amp;rdquo; と &amp;ldquo;a:&amp;rdquo; だけでも構いません
// q: ミリ秒単位で現在の時刻を取得するにはどうすればよいですか? // a: 詳細な対話のために、役割を定義することができます:
# Roles: copilot # Python のエキスパートで 15 年以上の経験があります # Role: me # 中堅エンジニア # # me: このループを最適化する最良の方法は何ですか? # copilot: ベクトル化されたアプローチを使用するか、中間結果をキャッシュすることを検討してください。 Exercise エクササイズ 1: &amp;ldquo;GitHub Copilot Chat&amp;rdquo; とエディタ内でのクイックチャットを使用して比較し、違いを考えてください。 エクササイズ 2: クイックチャットを使用して、3つの異なるコーディングの質問に対するワンライナーの回答を得てください。 エクササイズ 3: クイックチャット内で役割を定義し、文脈情報が Copilot の回答にどのように影響するかを観察してください。 Checklist for Further Learning クイックチャットは GitHub Copilot Chat プロダクトとどう異なり、どちらが他方より優れている場合があるのですか?</description></item><item><title>オープン・クエスチョンで尋ねる</title><link>/ja/refactoring/asking-with-open-ended-questions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/refactoring/asking-with-open-ended-questions/</guid><description>オープン・クエスチョンで尋ねる Description リファクタリングは、しばしば複雑なプロセスであります。必ずしも何が正しく、何が間違っているかについてではなく、基本概念と潜在的な改善を理解することが重要です。GitHub Copilotでオープン・クエスチョンを利用することで、開発者は GitHub Copilot の助けを借りてより熟慮した方法でコードの改善に取り組むことができます。
Example GitHub Copilotでのクエリに開かれた質問を導入すると、洞察に満ちた提案が得られることがあります。例えば:
// Q: この関数の復元性をどのように改善できますか? // A: &amp;lt;GITHUB COPILOT SUGGESTION&amp;gt; function backupData(data) { // 実装はこちら } // Q: この文脈でエラーを処理する最良の方法は何ですか? // A: &amp;lt;GITHUB COPILOT SUGGESTION&amp;gt; try { // 何かの操作 } catch (error) { // エラー処理 } Exercise エクササイズ 1: ファイルハンドリングに関連する関数を記述し、それをより信頼性があり効率的にする方法について Copilot に尋ねてみてください。 エクササイズ 2: 例外処理を含むコードスニペットを作成し、エラー報告の改善について Copilot に提案を求めてください。 エクササイズ 3: シンプルな UI コンポーネントを設計し、それに対するアクセスや操作をよりエレガントにする方法について Copilot に尋ねてみてください。 Checklist for Further Learning 既存のコードのどの部分がリファクタリングから利益を得ることができますか? オープンクエスチョンが開発プロセスでどのように機能しますか?</description></item><item><title>コードからコメントの自動生成</title><link>/ja/general/code-to-comment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/code-to-comment/</guid><description>コードからコメントの自動生成 Description GitHub Copilot はコードからコメントを生成できます。既存のコードが十分なコメントを欠いている場合や、他の開発者がコードを理解するのを助けるために、GitHub Copilot を使ってコメント形式で自動的に説明を生成しましょう。
Example 以下のサンプルは、与えられた数より小さい素数をリストするエラトステネスのふるいのアルゴリズムを示しています。このコードにはコメントが含まれていませんが、GitHub Copilotはコードの機能を説明するコメントを作成しています。
コメントなしのコードはこちらです:
def eratosthenes_sieve(n): primes = [] sieve = [True] * (n + 1) for p in range(2, n + 1): if sieve[p]: primes.append(p) for i in range(p * p, n + 1, p): sieve[i] = False return primes GitHub Copilotがそれを説明するコメントを追加する方法は次のとおりです:
# Write the description of the method here &amp;lt;- [Actual Prompt] # Input: n - the number of primes to return # Output: a list of the first n primes # Example: eratosthenes_sieve(5) -&amp;gt; [2, 3, 5, 7, 11] # Note: this is a very inefficient way to find primes, but it is easy to understand def eratosthenes_sieve(n): primes = [] sieve = [True] * (n + 1) for p in range(2, n + 1): if sieve[p]: primes.</description></item><item><title>コードからドキュメントへ</title><link>/ja/general/code-to-document/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/code-to-document/</guid><description>コードからドキュメントへ Description チャットベースのAIツールを使用することで、説明を自動生成するだけでなくドキュメントなどの長い文章を生成することができるようになります。例えば、GitHub Copilot Chat を活用することで、コード全体の概要説明や API ドキュメントを生成したり、またそれをコードの中に埋め込んだ状態でコードごと出力させる事ができるようになります。
Exampleコード 以下は、Ruby on Railsのコントローラー向けのコードスニペットです。
class RecipesController &amp;lt; ApplicationController before_action :set_recipe, only: [:show, :edit, :update, :destroy] # GET /recipes # GET /recipes.json def index @recipes = Recipe.all end # GET /recipes/1 # GET /recipes/1.json def show end # GET /recipes/new def new @recipe = Recipe.new end # GET /recipes/1/edit def edit end # POST /recipes # POST /recipes.json def create @recipe = Recipe.new(recipe_params) respond_to do |format| if @recipe.</description></item><item><title>コード補完</title><link>/ja/general/code-completion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/code-completion/</guid><description>コード補完 Description GitHub Copilot の最もシンプルな使用法のひとつはコード補完です。コード補完は、開発者がタイピングする際に潜在的なコードスニペットを提供することで開発者の生産性を向上させます。例えば、JavaScript の関数を定義することを想像してみてください。以下のコードを入力する際に、GitHub Copilot は関数内で使用できる潜在的なコードを提案します。
Example 入力コード function calculateSum(a, b) { // Enter your code here } Copilot による提案結果 function calculateSum(a, b) { // Enter your code here const sum = a + b; return sum; } Exercise エクササイズ 1: GitHub Copilot の提案を活用して calculateSum(a, b) 関数を完成させます。異なるプロンプトや部分的なコード入力が Copilot による提案にどう影響するかを探求します。 Checklist for Further Learning あなたのコードの出力は提供されたサンプルコードに似ていましたか? 出力されたコードは堅牢ですか? エラー処理は考慮されていますか? されていない場合どうすればよいですか? より正確なコードを書くためにどのようなプロンプトや文脈を追加できますか?</description></item><item><title>コメントからコードを生成</title><link>/ja/general/comment-to-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/comment-to-code/</guid><description>コメントからコードを生成 Description コードからコードを生成するコード補完のテクニックと同様に、最もベーシックな GitHub Copilot のテクニックです。GitHub Copilot は、開発者が提供した特定のテキストに基づいて新しいコードを生成することができます。コメントの形式で条件を定義することで、GitHub Copilot は要件に応じたコードを作成することができます。
Example 以下は、コメントを通じて GitHub Copilot に関数を作成するよう指示する方法です:
// Function name: calculateAverage // Function arguments: numbers (array) // Return type of the function: number これらのコメントに基づいて、Copilot は次のようなコードを提案します:
function calculateAverage(numbers: number[]): number { // calculate the average of the array const sum = numbers.reduce((a, b) =&amp;gt; a + b); return sum / numbers.length; } Exercise エクササイズ 1: 配列内の最大数値を計算する関数を作成するよう Copilot に指示するコメントを書いてください。以下の仕様を使用してください: // Function name: calculateMax // Function arguments: numbers (array) // Return type of the function: number エクササイズ 2: さまざまな数値セットで生成された関数をテストし、正しい最大値を返すかどうかを確認してください。 Checklist for Further Learning 生成されたコードは、指定された条件に基づいていますか?</description></item><item><title>コンテキストレス・アーキテクチャ</title><link>/ja/design-pattern/context-less-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/design-pattern/context-less-architecture/</guid><description>コンテキストレス・アーキテクチャ {% hint style=&amp;ldquo;info&amp;rdquo; %} 疎結合アーキテクチャ自体も多くの場合推奨されており、このパターンはその考え方に合致しています。しかし、AIを活用した開発の文脈をより広範なアーキテクチャの議論と結びつけ、それを正当化するためには、より多くの議論が必要です。ぜひディスカッションを始めましょう! {% endhint %}
Description コンテキストレス・アーキテクチャは、システム内のより小さく、明確に定義されたコンテキストにコーディングを限定するデザインパターンです。複雑なプログラムを疎結合で独立したコンポーネントに分割することで、このアーキテクチャは保守性、拡張性、柔軟性を向上させます。
GitHub Copilot のような AIツールと連携する際、その性質と制限を理解することが不可欠です。現在の GitHub Copilot は AGI (Artificial General Intelligence) ではないため、限定された正確なコンテキスト内で最も効果的に動作します。特定のニーズに焦点を当てることで、開発者は GitHub Copilot の正確性と効率を最大化することができます。
キーとなるのは、各コンポーネントが特定の目的に役立つ疎結合なシステムを作成することです。このアプローチは GitHub Copilot の制限と合致しており、開発者がツールをより効果的に使用して、モジュラーで堅牢なソフトウェアを構築することができます。 一方で、ツールにあわせてシステムのデザインを決めることは本質的なことではありません。 このパターンは現実のプロジェクトやプロダクトにおいて、疎結合であることが意味を成す場合に、AI の開発における活用を追加で考えることで、より効果的に開発速度が上がることを目的としています。
Example Before ここでは、ユーザー管理と認証が混ざり合っており、コンテキストが不明確で絡み合っています。
class UserManager: def create_user(self, username, password): # Code to create user pass def login(self, username, password): # Code to handle login pass def update_user_profile(self, user_id, profile_data): # Code to update user profile pass After コンテキストレス アーキテクチャを適用することで、ユーザー管理と認証が明確なコンテキストに分離されます。</description></item><item><title>タイプヒンティング</title><link>/ja/general/type-hinting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/type-hinting/</guid><description>タイプヒンティング Description 動的型付けプログラミング言語の世界では、開発者は特に複雑なシステムでコードを理解する際に課題に直面することがよくあります。タイプヒンティングは、期待されるデータ型を明示的に宣言することで、明確さの層を追加します。 GitHub Copilot を使う際にもタイプヒンティングを使うことにより、コード提案の精度を高め、開発者と GitHub Copilot がより効率的にコードを書くのを支援します。
深くネストされた関数でプロジェクトに取り組んでいると想像してみてください。変数の型を追跡するのが複雑になります。タイプヒンティングの統合は、同僚の開発者にとってコードをより読みやすくすることにも繋がります。
Example Python でタイプヒンティングを使用して関数を定義する方法は以下の通りです。
def add_numbers(a: int, b: int) -&amp;gt; int: return a + b GitHub Copilot はこれらのタイプヒンティングを認識し、それに応じてコード提案を生成します。
Exercise エクササイズ 1: タイプヒンティングを使用して、2つの文字列パラメータを取り、それらの連結を返す関数を書いてください。 エクササイズ 2: プロジェクト内の既存のコード片をタイプヒンティングを含むように変換し、GitHub Copilot の提案の違いを観察してください。 エクササイズ 3: 複数のメソッドを持つ複雑なクラスを作成し、すべてのパラメータと戻り値のタイプヒンティングを使用してください。 Checklist for Further Learning コードベース全体でタイプヒンティングを一貫して使用していますか? タイプヒンティングの過剰な使用の潜在的な欠点を考慮しましたか、そしてコード内での適切なバランスをどのように見つけるかですか?</description></item><item><title>テストコード生成の方法を指定する</title><link>/ja/testing/specify-test-valiation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/testing/specify-test-valiation/</guid><description>テストコード生成の方法を指定する Description テストに関する指示を具体的に示すことは、必要なシナリオをすべてカバーする良い方法です。&amp;ldquo;ユニットテストを追加する&amp;quot;といった曖昧な指示ではなく、テストフレームワークや生成するケースの数などの具体的な詳細を提供することができます。GitHub Copilotのようなツールを活用する際には、「JunitとMockitoを使用してユニットテストを追加し、少なくとも10種類の有効な/無効な入力の組み合わせをテストする」といった指定を行うことで、より正確で包括的な結果を得ることができます。
Example Junit と Mockito を使用してテストコードを生成する場合、次のプロンプトを GitHub Copilot に提供できます:
// JunitとMockitoを使用してユニットテストを追加する // 少なくとも10種類の有効な/無効な入力の組み合わせをテストする @Test public void validateInput() { // ここにコードを記述 } Exercise エクササイズ1: Junit を使用して、異なる3つの有効な入力で単純なメソッドをテストするユニットテストを書いてみましょう。 エクササイズ2: ユニットテストを拡張して、3つの異なる無効な入力を含め、例外が適切に処理されることを確認します。 Checklist for Further Learning コード内のすべての重要なパスをテストする方法はどのように確保できるでしょうか? テストが必ず失敗するようにテストコードを書くことはできますか? コードベースが進化するにつれてテストを維持するためにどのような戦略をとることができますか?</description></item><item><title>ハイレベルアーキテクチャを先に</title><link>/ja/design-pattern/high-level-architecture-first/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/design-pattern/high-level-architecture-first/</guid><description>ハイレベルアーキテクチャを先に Description 複雑なシステムを開発するとき、いきなり細部のコードに飛び込み、プログラムの全体的なアーキテクチャを見失うことはよくあることです。このような事が繰り返されると、同時に GitHub Copilot も全体的なアーキテクチャを見失うことに繋がります。これは誤解やエラーの原因となってしまいます。開発において、プログラムのハイレベルなアーキテクチャを先に設計し、コードの各部分の機能と目的についてコメントしていくことにより、GitHub Copilot も文脈をよりよく理解し、より的確な提案をすることができます。
Example ウェブアプリケーションでのAPIエンドポイントファイルを考えてみましょう。初期に設計を自然言語で提案することは、各エンドポイントの機能を GitHub Copilot に理解させるのに役立ちます。
# GET /items # - アイテムのリストを取得します。 # - 応答でアイテムのコレクションを返します。 # # POST /items # - 新しいアイテムを作成し、コレクションに追加します。 # - リクエストでアイテムのパラメーターが必要です。 # - 成功時に成功メッセージとともにカートページにリダイレクトします。 # - 失敗した場合、新しいアイテムのフォームを表示します。 # # GET /items/:id # - 特定のIDを持つアイテムを取得します。 # - URLパラメーターとしてアイテムのIDが必要です。 # - 応答で要求されたアイテムの詳細を返します。 # ... Exercise エクササイズ: バックエンドの簡単な API について、各エンドポイントに対するコメントを含め、ログインと登録システムのハイレベルアーキテ クチャのアウトラインを作成します。 Checklist for Further Learning コードの詳細を書く前に明確なロードマップを確立しましたか? GitHub Copilot は、ハイレベルのコメントを読むだけで、ファイルの目的を理解できますか? このパターンをコードベース全体で一貫して適用していますか?</description></item><item><title>プログラミング言語間の翻訳</title><link>/ja/general/language-translation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/language-translation/</guid><description>言語翻訳 Description 時に、開発者が Python から JavaScript や HTML から Markdown など、一つの言語から別の言語にコードを翻訳する必要があるかもしれません。チームがマルチプラットフォームプロジェクトに取り組んでいて、PythonのアルゴリズムをWeb 統合のために JavaScript に素早く変換する必要がある場合を想像してみてください。GitHub Copilot のプログラミング言語翻訳能力は、手動での翻訳にかかる時間を節約し、シームレスなクロス言語開発を可能にします。
Example Python 関数を JavaScript に翻訳する例は以下の通りです:
Python コード:
def add(a, b): return a + b GitHub Copilotを使用すると、これを簡単にJavaScriptに翻訳できます:
function add(a, b) { return a + b; } Exercise エクササイズ 1: GitHub Copilotを使用して、シンプルな HTML 構造を Markdown に翻訳してください。 エクササイズ 2: 与えられた Python 関数を、それに相当する Java に変換してください。 エクササイズ 3: C#の関数を書いて、それを GitHub Copilot を使用して Ruby に翻訳してください。 Checklist for Further Learning GitHub Copilotは、特定の言語間でより正確な翻訳を提供するために、どのようにさらに最適化できますか?</description></item><item><title>プロンプトとコード生成プロセスのコーチング</title><link>/ja/collaboration/coaching-on-prompts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/collaboration/coaching-on-prompts/</guid><description>プロンプトとコード生成プロセスのコーチング {% hint style=&amp;ldquo;info&amp;rdquo; %} これは合理的に聞こえますが、体系的で確立されたパターンではありません。 {% endhint %}
Description GitHub Copilot のような AIツールを使用すると、出力が整ったものに見えることがあります。レビュー時に完璧に見えるコードも、生成プロセスで非効率であったり、重要な部分が欠けていることがあるかもしれません。生成プロセスへのコーチングは、開発者が潜在的な問題を認識し、効率的かつ正確なコードを作成できるようにするために不可欠です。
現代のソフトウェア開発において、コーチングはレビュー以上のものです。ガイドし、インスピレーションを与え、改善する機会となります。 このパターンは、GitHub Copilot のような AIツールでのコード生成に使用されるプロンプトの品質に対する仲間へのコーチングを強調しています。コーチングではプロンプトだけでなく、生成プロセスの理解も高めることを目指します。
Example 特定のタスクのコードを生成するプロンプトを作成したチームメートのシナリオを想像してみてください。あなたの役割は、プロンプトの明確さを向上させ、基礎となる生成プロセスを理解するためのコーチングを提供することです。
元のプロンプト:
&amp;#34;Create a function to find prime numbers within a range.&amp;#34; コーチング後のプロンプト:
&amp;#34;Develop a Python function that takes two integers as input and returns a list of prime numbers within that range. Ensure the function efficiently handles different ranges, including edge cases.&amp;#34; Exercise エクササイズ 1: チームメンバーのプロンプトに対してコーチングをしてください。改善できる分野を特定し、生成プロセスに対する洞察を提供し、変更がなぜ有益であるかを説明してください。 エクササイズ 2: GitHub Copilot によって以前に生成されたコードスニペットを分析し、プロンプトと基礎となる生成プロセスの両方に焦点を当てます。それがより具体的で効率的になるようにコーチングを提供してください。 エクササイズ 3: 様々なプログラミングのシナリオに対して自分自身のプロンプトを作成する練習をしてください。プロンプトの品質とコード生成プロセスの理解の両方を強調して、仲間とコーチングを行ってください。 Checklist for Further Learning 単なるレビューと、継続的な改善のためのコーチングとの違いを認識しましたか?</description></item><item><title>ユニットテストの作成</title><link>/ja/testing/creating-unit-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/testing/creating-unit-tests/</guid><description>ユニットテストの作成 Description テストはソフトウェア開発プロセスの基本的な部分であり、コードが設計どおりであり、意図した通りに動作することを確認します。システムの個々のコンポーネントをテストするユニットテストの作成は、チャレンジングで時間のかかる作業です。GitHub Copilotを使用すると、このプロセスがより効率的になります。開発者のAliceさんがGitHub Copilotをどのように活用してアプリケーションのユニットテストを記述し、作業量を減少させ、効率を向上させるかを探ってみましょう。 このパターンは、機能テストや API テストにも適用可能です。
Example 徹底的にテストする必要のある JavaScript の関数に取り組んでいます。GitHub Copilotの助けを借りて、必要なユニットテストを素早く生成できます。
以下は、テストしたいシンプルな関数です:
function add(x, y) { return x + y; } そして、GitHub Copilotの支援を受けてユニットテストを作成する方法は次のとおりです:
const assert = require(&amp;#39;assert&amp;#39;); describe(&amp;#39;add関数&amp;#39;, () =&amp;gt; { it(&amp;#39;2つの数値を正しく加算する必要があります&amp;#39;, () =&amp;gt; { assert.equal(add(2, 3), 5); }); }); Exercise エクササイズ1: GitHub Copilotを使用して2つの数値を掛ける関数のユニットテストを作成してください。 エクササイズ2: Copilotを活用して、nullやundefinedの値を処理するなど、さまざまなエッジケースのテストスイートを作成してください。 エクササイズ3: 現在のプロジェクトを振り返り、テストが不足しているコードの部分を特定し、Copilotを使用してユニットテストを作成してください。 Checklist for Further Learning 自分のテストが包括的であり、すべての可能なシナリオをカバーしていることをどのように確認できますか? GitHub Copilot がシナリオを全くカバーしなかった際にどのようなプロンプトを追加しますか? 他の種類のテスト(E2Eテスト、統合テスト、機能テストなど) に対して、GitHub Copilot はどのように有益であり、それらを記述する際に GitHub Copilotはどのように支援できるか?</description></item><item><title>リファクタリング前にテストコードを書く</title><link>/ja/refactoring/writing-test-code-before-refactoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/refactoring/writing-test-code-before-refactoring/</guid><description>リファクタリング前にテストコードを書く Description ソフトウェア開発の現代世界において、GitHub Copilotのようなツールが手元にあると、リファクタリングは楽しく魅力的なタスクになるかもしれません。変更を加えることは非常に簡単ですが、適切なテストがない場合、最も有望なコードの変更でも予期せぬ結果につながることがあります。このパターンは、コードをリファクタリングする前にテストを記述して機能が一貫していることを確認する重要性を強調しています。テストを安全ネットと考えてください。問題が深刻化する前に問題を検出します。
Example ショッピングカートの合計価格を計算する関数があるとし、これをより明確にリファクタリングしたいと考えたとします。以下は元のコードです:
def total_price(items): return sum(item[&amp;#39;price&amp;#39;] * item[&amp;#39;quantity&amp;#39;] for item in items) リファクタリング前に、既存の機能が保持されていることを確認するためにテストを記述します:
def test_total_price(): items = [ {&amp;#39;price&amp;#39;: 5, &amp;#39;quantity&amp;#39;: 2}, {&amp;#39;price&amp;#39;: 3, &amp;#39;quantity&amp;#39;: 1} ] assert total_price(items) == 13 これでコードをリファクタリングして、可読性を向上させることができます:
def total_price(items): total = 0 for item in items: total += item[&amp;#39;price&amp;#39;] * item[&amp;#39;quantity&amp;#39;] return total テストはまだ合格しますので、リファクタリングによって期待される結果が変わっていないことを保証します。
Exercise エクササイズ 1: リファクタリングが必要な関数を記述し、それに対応するテストを記述します。 エクササイズ 2: テストが合格することを確認しながら関数をリファクタリングします。 エクササイズ 3: リファクタリングした関数に誤った変更を加えてエラーが発生する状況を模倣し、テストがエラーを検出する過程を観察します。 Checklist for Further Learning コードの重要な側面をすべてカバーするためにテストがどのように確認されますか? 選択したプログラミング言語で、テストを記述して実行するためのツールやフレームワークは何ですか? リファクタリング時にテスト駆動開発（TDD）のプラクティスをどのように適用できますか? テストを整理するためのベストプラクティスは何ですか?</description></item><item><title>一貫性のあるコーディングスタイル</title><link>/ja/design-pattern/consistent-coding-style/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/design-pattern/consistent-coding-style/</guid><description>一貫性のあるコーディングスタイル Description 一貫性のあるコーディングスタイルは、ソフトウェア開発において非常に重要です。それはコードの可読性を向上させるだけでなく、GitHub Copilot からのより良い提案にもつながります。インデント、タブ、命名規則、コメントの書き方、言語固有の省略方法など、コーディングスタイルの領域は多岐にわたります。一様なコーディングスタイルとパターンに従うことで、開発者は優れたコーディング慣行に従いやすくなります。
Example 以下は、明確な関数名を使用し、コードベースのパターンに従う良い例です（snake_case を使用）:
def calculate_area(length, width): return length * width これと一貫性のないコーディングスタイルを比較してみてください。一貫性が無いコードの場合、GitHub Copilot から以下のような存在しない関数の提案をもらうことに繋がる可能性があります。
def calcSomething(l, w): area = calcArea(l, w) # &amp;lt;Code goes here&amp;gt; Exercise エクササイズ 1: 記述的で一貫性のある命名規則を使用して関数を書く練習をします。 エクササイズ 2: コードスニペットを分析し、コーディングスタイルの非一貫性を特定します。必要な調整をします。 エクササイズ 3: GitHub Copilot を使用して小さなプロジェクトを作成し、異なるコーディングスタイルへの反応を観察します。 Checklist for Further Learning 一貫性のあるコーディングスタイルは、コードベースの可読性と保守性にどう影響しますか? チームやプロジェクト内でコーディング基準を強制するために、どのようなコミュニケーションが必要ですか? GitHub Copilot は、コーディングのベストプラクティスをどのように支援しますか? どのような行動を促進または抑制しますか?</description></item><item><title>計算ロジックを独立させる</title><link>/ja/refactoring/making-the-calculation-part-independent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/refactoring/making-the-calculation-part-independent/</guid><description>計算ロジックを独立させる Description ソフトウェア開発の急速に進化する世界で、GitHub Copilot のようなツールに頼ることで、開発プロセスを強化できます。しかし、複雑な計算を行う際、大規模言語モデルの現行バージョンには限界があるかもしれません。これに対処するため、開発者は計算部分を別の関数に移動してコードをリファクタリングすることができます。これにより、コードの保守性、可読性が向上し、さらに AI ツールをつかったテストや開発が容易になります。金融ソフトウェアシステムを構築している開発者が、利息計算をユーザーインターフェイスロジックから分離する必要がある場合を想像してみてください。毎回 GitHub Copilot が特定のコードを書き換えるたびにロジックが正しいかを検証するのは非常に厄介な作業です。この複雑な計算を分離することで、柔軟でより耐久性のある AI と協働できるコードベースを作成します。
Example 計算と注文合計の処理
計算ロジックが他の機能と混ざっていた場合は以下のようになります。
def handle_order(order_items): tax_rate = 0.05 total = 0 for item in order_items: total += item[&amp;#39;price&amp;#39;] total += total * tax_rate process_payment(total) ship_order(order_items) return total 一方で、計算ロジックを別の関数に移動すると、以下のようになります。
def calculate_total(order_items, tax_rate=0.05): subtotal = sum(item[&amp;#39;price&amp;#39;] for item in order_items) total = subtotal + (subtotal * tax_rate) return total def handle_order(order_items): total = calculate_total(order_items) process_payment(total) ship_order(order_items) return total ここで、calculate_total 関数は注文合計に関連するすべての計算を処理し、handle_order 関数は支払いの処理や注文の発送など、他の関連機能を処理します。</description></item><item><title>構造化データからのオブジェクト生成</title><link>/ja/general/object-generation-from-structured-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/object-generation-from-structured-data/</guid><description>構造化データからのオブジェクト生成 Description 開発者にとって、構造化データの取り扱いは日常的なタスクです。JSONなどの形式のデータをプログラミング言語内のオブジェクトに変換することで、堅牢で保守性の高いコードを作成できます。例えば、ユーザーのリストがあり、このデータをアプリケーション内のユーザーオブジェクトに変換したい場合を想像してみてください。GitHub Copilot は、この変換プロセスをサポートし、煩雑な作業を一瞬で終わる簡単な作業に変えてくれます。
Example 以下は、与えられたJSONデータをユーザーオブジェクトのリストに変換するPythonの例です。
import json json_data = &amp;#39;[{&amp;#34;id&amp;#34;: &amp;#34;1&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Yuki Hattori&amp;#34;}, {&amp;#34;id&amp;#34;: &amp;#34;2&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;George Hattori&amp;#34;}]&amp;#39; users = json.loads(json_data) class User: def __init__(self, id, name): self.id = id self.name = name user_objects = [User(user[&amp;#39;id&amp;#39;], user[&amp;#39;name&amp;#39;]) for user in users] for user in user_objects: print(user.id, user.name) Exercise エクササイズ 1: 異なる JSON 構造からオブジェクトを生成してみてください。例えば、ユーザーのアドレス情報を含むJSONなどです。 エクササイズ 2: JSON 内のデータが欠落しているようなエッジケースを取り扱ってみてください。コードが適切に処理されるようにしてください。 学習のためのチェックリスト より複雑なデータ構造に適応するためにコードをどのように変更しますか? データをオブジェクトに変換する前に、どのような方法でデータの妥当性を確認できるでしょうか? このパターンを異なるプログラミング言語やフレームワークにどのように適用できますか?</description></item><item><title>自然言語でテストケースを最初に記述する</title><link>/ja/testing/writing-test-cases-in-natural-language-first/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/testing/writing-test-cases-in-natural-language-first/</guid><description>自然言語でテストケースを最初に記述する Description GitHub Copilotのような AI を活用したコード生成を行う際、AI に明確なコンテキストを提供せずに包括的なテストカバレッジを期待するのは難しいことです。その段階でコードでテストケースを記述しようとする代わりに、まず自然言語の記述を作成します。これにより、生成されたコードがすべての必要な基準を満たすことを確認することに焦点を当て、テストカバレッジを向上させることができます。
Example 以下は、自然言語でテストケースを記述する方法の例です。この方法を使用することで、コードを生成する前にさまざまなシナリオやエッジケースをカバーすることができます。
class TestMultiply(unittest.TestCase): def test_multiply(self): # 正数、負数、ゼロ、小数、非整数の入力など、さまざまなケースのテスト Exercise エクササイズ1: 三角形の面積を計算する関数に対して、自然言語のテストケースを記述してください。さまざまな入力シナリオとエッジケースを考慮してください。 エクササイズ2: エクササイズ1で記述した自然言語のテストケースから、GitHub Copilotを使用してコードを生成します。結果を分析します。 エクササイズ3: より複雑な関数（例: ソートアルゴリズム）に対して、自然言語を使用してテストスイートを作成します。さまざまな入力シナリオとエッジケースを考慮してください。 学習のためのチェックリスト コードを記述する前に自然言語でテストケースを記述する利点は何ですか? 自然言語で記述されたテストケースは、開発者と非技術的な関係者との協力をどのように改善できますか? このアプローチを使用する際の潜在的な課題は何であり、それらはどのように緩和できますか?</description></item><item><title>失敗ケースを最初に書く</title><link>/ja/testing/writing-failure-case-first/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/testing/writing-failure-case-first/</guid><description>失敗ケースを最初に書く {% hint style=&amp;ldquo;info&amp;rdquo; %} 失敗ケースを最初に書くことは開発において重要なことではありますが、GitHub Copilotにテストケースを適切に提案させる方法について、ベストプラクティスを見つけ出す必要があります。 {% endhint %}
Description 開発サイクルにおいて、テストケースの作成は重要な側面です。GitHub Copilot を使用すると、実装を読み取り、それに応じてテストケースを生成するため、さらに便利になります。一方で GitHub Copilot は成功ケースの生成に非常に効果的ですが、失敗ケースを見落とさないようにすることが重要です。最初に失敗ケースを考慮すると、より堅牢なコードにつながることがあります。
Example これの重要性を示すために、2つの数値を割る関数を考えてみましょう。GitHub Copilot は、成功ケースをカバーするテストケースを提案するかもしれません。しかし、分母がゼロの場合はどうでしょうか？
def divide(a, b): return a / b # Failure test case def test_divide_by_zero(): # &amp;lt;YOUR CODE AND GITHUB COPILOT SUGGESTION HERE&amp;gt; Exerecise エクササイズ1: 2つの数字を掛ける関数を書き、成功ケースと失敗ケースの両方を含めてください（大きな数字の掛け算などのエッジケースを考慮してください） エクササイズ2: プロジェクト内の既存のコード片を分析し、欠落している失敗ケースを特定してください。これらのテストケースを書いてみましょう。 エクササイズ3: 次のプロジェクトでTDDのアプローチを実装し、実際の実装よりも先に失敗テストケースを書くようにし、これが開発プロセスにどのように影響するかを考えてみてください。 Checklist for Further Learning 最近のコードで全ての潜在的な失敗ケースを考慮しましたか？ テストスイートに一貫して失敗テストケースを含めていますか？ チームがテストケースの作成においてTDDのマインドセットを採用するように、どのように促進できますか？</description></item><item><title>小さなコードチャンクで作業する</title><link>/ja/design-pattern/working-on-small-chunk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/design-pattern/working-on-small-chunk/</guid><description>小さなまとまりで作業する Description 小さなコードの断片をより少ないコンテキストで扱うと、GitHub Copilot の出力が向上します。複雑なアプリケーションを構築していると想像してください。すべてを一度に生成しようとする代わりに、タスクを小さな部分に分割し、限定されたコンテキストを GitHub Copilot に提供します。このアプローチは開発プロセスを合理化するだけでなく、生成されたコードの品質も向上させます。
コンテキストレスなアーキテクチャをデザインの段階で考慮するアイデアもありますが、すべてのプロジェクトで疎結合のアーキテクチャを適用することは難しいです。また、AIツールの精度を高めるためにアーキテクチャデザインを変えるのは本末転倒です。このパターンでは、少なくとも作業環境でコンテキストができるだけ小さくなるように、小さなチャンクで作業することによりGitHub Copilot の提案を向上させることを目的としています。GitHub Copilot が、全体的なプロジェクトの複雑さに圧倒されることなく、手がかりの具体的なタスクを理解できるようにする、よりコントロールされた、正確で、効率的なコード生成が可能です。
Example 複雑な計算する関数を書くとしましょう。GitHub Copilot に全体の複雑な解決策を求める代わりに、いくつかの関数に分けて、それぞれの関数を生成するように求めます。このアプローチは、GitHub Copilot がより小さなコンテキストで作業することを可能にし、より正確なコードを生成します。
def complex_calculation(n): # Ask GitHub Copilot to complete this function # Just write your code description by yourself class complex_calculation: def __init__(self, n): self.n = n def foo_calculation(self): # Ask GitHub Copilot to complete this function def bar_calculation(self): # Ask GitHub Copilot to complete this function Exercise エクササイズ 1: 複雑なアルゴリズムを小さな部分に分割し、各部分のコードを GitHub Copilot で生成します。 エクササイズ 2: タスクのハイレベルの説明を書き、狭いコンテキストで GitHub Copilot にコードを求めます。結果を比較します。 エクササイズ 3: 個人的な開発プロセスを振り返り、タスクを小さなチャンクに分割することが有益であるエリアを特定します。 Checklist for Further Learning コンテキストを絞り込むことが、GitHub Copilot の提案の精度にどのように影響しますか?</description></item><item><title>正規表現</title><link>/ja/general/regular-expression/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/regular-expression/</guid><description>正規表現 {% hint style=&amp;ldquo;info&amp;rdquo; %} 現在のところ、LLMには複雑な正規表現を適切に表現する機能はありません。複雑なものについては、人間が補足的に入力しなければならないシーンが出てくるでしょう。一方で単純な正規表現には適用できます。 {% endhint %}
Description GitHub Copilot は正規表現のパターンのドラフトを作成できます。以下では、文字列の検索や抽出に正規表現を使用する方法について説明します。2つの例を通して、GitHub Copilot が &amp;ldquo;入力/出力パターン&amp;rdquo; と &amp;ldquo;自然言語パターン&amp;rdquo; の両方で正規表現を生成する方法を示します。
Example 入力/出力パターン 最初に、入力と出力を記述することで、GitHub Copilot は正規表現のパターンを作成できます。
import re # Write a regular expression # - Input: &amp;#34;Hello World&amp;#34; # - Output: [&amp;#34;H&amp;#34;, &amp;#34;W&amp;#34;] regex 結果として以下のようなコードを得ることができます。
import re # Write a regular expression # - Input: &amp;#34;Hello World&amp;#34; # - Output: [&amp;#34;H&amp;#34;, &amp;#34;W&amp;#34;] regex = r&amp;#34;[A-Z]&amp;#34; matched = re.findall(regex, &amp;#34;Hello World&amp;#34;) 自然言語パターン 次に、正規表現で達成したい内容を自然言語で提供します。</description></item><item><title>定義に移動</title><link>/ja/client-tips/go-to-definition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/client-tips/go-to-definition/</guid><description>定義に移動 {% hint style=&amp;ldquo;info&amp;rdquo; %} 2023年8月現在、GitHub Copilotはすべてのコードベースを読み込むわけではないので、このテクニックが必要になる場面が出てくるでしょう。一方、近い将来、GitHub Copilotでこのテクニックが不要になる可能性もあり、このテクニックは非常に限定的なものになるかもしれません。 {% endhint %}
Description 複雑なコードベースで作業する際に、特定の関数やクラスの定義を見つけるためにファイル間をジャンプしたり、コードのレイヤーを検索するのは面倒です。&amp;ldquo;定義に移動&amp;rdquo; は、Visual Studio Code の便利な機能で、開発者が現在のファイル内の関数やクラスの定義にすばやく移動できるようにします。これによって生産性が向上するだけでなく、コード構造の理解も深まります。GitHub Copilot は開いているタブを読み取ります。&amp;ldquo;定義に移動&amp;rdquo; を使い実装を遡りながらファイルを開いていくことで、コードの奥深くにある定義に関連するコードスニペットも GitHub Copilot に渡すことができます。
Example Visual Studio Codeの &amp;ldquo;定義に移動&amp;rdquo; 機能を使用するには、調べたい関数やクラスを右クリックし、&amp;ldquo;定義に移動&amp;rdquo; を選択します。 ショートカット F12 も使用できます。以下のように行うことができます。
Exercise エクササイズ 1: Visual Studio Code で複数のファイルを持つプロジェクトを開き、クラスまたは関数定義へ &amp;ldquo;定義に移動&amp;rdquo; を使用して移動してみましょう。 エクササイズ 2: 変数、メソッド、クラスなど、異なる関数やクラスシンボルで &amp;ldquo;定義に移動&amp;rdquo; 機能の使用を練習して、その多様性を理解しましょう。 Checklist for Further Learning &amp;ldquo;定義に移動&amp;rdquo; 機能は、全体のコーディング体験をどのように向上させることができますか? &amp;ldquo;定義に移動&amp;rdquo; 機能と GitHub Copilot の統合は、コードナビゲーションと理解にどのようにさらに支援することができますか? この機能が開発ワークフローで特に有用である場合を特定できますか?</description></item><item><title>微細な OSS 依存関係の排除</title><link>/ja/design-pattern/eliminating-a-tiny-oss-dependency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/design-pattern/eliminating-a-tiny-oss-dependency/</guid><description>微細な OSS 依存関係の排除 {% hint style=&amp;ldquo;info&amp;rdquo; %} これは限定的な適用かもしれません。より多くの事例が発見されれば、この成熟度レベルは上がっていきます。 {% endhint %}
Description left-pad 問題をご存知ですか? 2016年に、left-pad ライブラリがnpmから停止され、それに依存するよく知られたライブラリが動作しなくなりました。left-pad は、指定された文字数、または指定されていない場合はスペースで、文字列の左側を埋めるだけのシンプルなJavaScriptライブラリです。空白行を除いて、約10行のシンプルなコードです。
車輪の再発明を避けるための多くのアイデアがありますが、一方で、重大な影響を及ぼす可能性のある外部コードにも注意を払う必要があります。提供されたコードの範囲が非常に限られている場合、外部ソースに依存するよりも、内部に含める方が良いかもしれません。
Samples 以下のように、left-pad 関数を実装することができます:
def leftpad(string, length, char = &amp;#39; &amp;#39;) string.rjust(length, String(char)) end Exercise エクササイズ 1: 文字列、長さ、パディングする文字を引数とする left-pad 関数を GitHub Copilot を使って実装します。デフォルトの文字はスペースであるべきです。 エクササイズ 2: プロジェクト内に複数の小さな外部依存関係が存在するシナリオを考えます。そのような依存関係を置き換えることができる小さなユーティリティ関数を特定し、実装します。 Checklist for Further Learning 外部依存関係を使用するか、自分でコードを実装するかのトレードオフを考慮しましたか? この小規模な依存関係を排除するパターンが、コードの保守性にどのように影響する可能性がありますか? 小規模な外部依存関係を内部実装に置き換える際に使用できる原則やガイドラインは何ですか?</description></item><item><title>必要な部分だけをテストする</title><link>/ja/testing/test-only-what-is-necessary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/testing/test-only-what-is-necessary/</guid><description>必要な部分だけをテストする {% hint style=&amp;ldquo;info&amp;rdquo; %} 不必要なテストケースを書く必要はありませんが、どのようなテストが必要かはチームによります。パターンとして具体化するには、より具体的な議論が必要です。 {% endhint %}
Description 高速なソフトウェア開発の時代において、効率的で有益なテストの記述はこれまで以上に重要です。GitHub Copilotを使用する際に、開発者はカバレッジを増やすために多くのテストコードを生成してしまうかもしれません。しかし、不必要なテストコードの生成は保守の負担や技術的な負債を引き起こす可能性があります。GitHub Copilotを使用してテストコードを書く際には必要な部分のみをテストする事が重要です。
Example 特定の関数に対して意味のあるテストを書くことに重点を置くことで、カバレッジを上げるために複数のテストを書く代わりに、意味のあるテストを書くことが重要です。
以下は不必要になりうるテストコードの例です:
セッターやゲッターのテスト 言語の機能のテスト フレームワークの機能のテスト 定数のテスト 同じロジックを持つ冗長なテスト 些細なロジックのテスト サードパーティのライブラリのテスト ロジックのないランダムな値のテスト カバレッジを増やすだけでなく、また価値を追加しない数多くのテストを追加するのではなく、必要なテストのみを追加します。
Exercise エクササイズ 1: 現在意味のないテストで過度にテストされているコードベース内の関数を特定し、必要なテストのみを含むようリファクタリングします。 エクササイズ 2: コードの重要な部分に新しいテストを書き、冗長性を避けて重要な側面に焦点を当てます。 エクササイズ 3: 現在のテストカバレッジを評価し、不可欠なカバレッジを失うことなくテストを削減できる領域を特定します。 Checklist for Further Learning 機能を確実に検証するテストを書いているか、それとも単にカバレッジを上げるためのテストを書いていますか? 書いているテストがプロジェクトに価値を提供し、保守の負担を増やすだけでないことをどのように確認できますか? 特に GitHub Copilot などのツールを使用する際、テストスイートをスリムで意味のあるものに保つためにどのような戦略を取り入れることができますか?</description></item><item><title>便利なファイルのピン留め</title><link>/ja/client-tips/pin-the-file-you-need/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/client-tips/pin-the-file-you-need/</guid><description>便利なファイルのピン留め Description GitHub Copilot の性能は、提供されるコンテキストに依存します。GitHub Copilot はテキストの類似性で開いているタブを検索し、大規模言語モデルにスニペットを送信します。したがって、私たちは AI に提供したいコンテキストを慎重に考える必要があります。プログラミングでは、宣言ファイル（d.ts）、テストファイル、インターフェイスファイルなどが豊富なコンテキスト情報を含んでいます。Visual Studio Codeのピン留め機能を使用すると、これらのファイルを必要に応じて簡単にアクセスし、GitHub Copilotに効率的に情報を提供できます。
Example Visual Studio Codeでファイルをピン留めする方法は次のとおりです:
ピン留めしたいファイルを開きます。 ファイルタブ上で右クリックします。 コンテキストメニューから&amp;quot;Pin Tab&amp;quot;を選択します。 Exercise エクササイズ 1: 現在のプロジェクトで宣言ファイル（例: .d.tsファイル）をピン留めし、GitHub Copilotと一緒に作業する際にアクセスが容易になることに注目してください。 エクササイズ 2: 新しいインターフェイスファイルを作成し、ピン留めします。GitHub Copilotがこのファイルをどのように利用してより良いコード提案ができるのか探究してください。 エクササイズ 3: プロジェクト内で複数のテストファイルをピン留めし、Copilotの助けを借りて新しいテストケースを書く際にどのように助けになるか観察してください。 Checklist for Further Learning ピン留めするファイルの種類を変えると、GitHub Copilot との作業フローにどのような影響がありますか? Visual Studio Codeの他の機能は、GitHub Copilot との経験を向上させるためにどう活用できますか? 大量のピン留めファイルを管理して、常に GitHub Copilot に適切なコンテキストが利用可能であるようにするにはどうすればよいですか?</description></item><item><title>例示によるコード生成</title><link>/ja/general/showing-examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/general/showing-examples/</guid><description>例示によるコード生成 Description GitHub Copilotを使用して、開発者は提供された例に基づいてコードを生成できます。特定の出力を生成するコードが期待される場合、これは非常に便利です。このパターンでは、例としてJSONを生成するなど、Ruby on Rails のモデルを作成する方法を探ります。
Example 以下のサンプルは、コメント内で例を提供し、GitHub Copilot に対応するモデルを作成する Ruby on Rails コードを生成するように頼む方法を示しています。
# 以下のJSONを作成するコード生成の例: # { # &amp;#34;name&amp;#34;: &amp;#34;John Smith&amp;#34;, # &amp;#34;age&amp;#34;: 30, # &amp;#34;description&amp;#34;: &amp;#34;これはサンプルの説明です。&amp;#34;, # &amp;#34;country&amp;#34;: &amp;#34;Japan&amp;#34;, # &amp;#34;title&amp;#34;: &amp;#34;Customer Success Architect&amp;#34;, # &amp;#34;email&amp;#34;: &amp;#34;johnsmith@example.com&amp;#34; # } rails g model users name:string age:integer description:text country:string title:string email:string Exercise エクササイズ 1: 以下の例に基づいて、書籍のモデルを作成する Ruby on Rails のコードを生成してください。 { &amp;#34;title&amp;#34;: &amp;#34;Book&amp;#34;, &amp;#34;author&amp;#34;: &amp;#34;Jane Doe&amp;#34;, &amp;#34;price&amp;#34;: 19.99 } エクササイズ 2: JSONの例で異なる属性とタイプを試し、対応する Rails のモデル生成コードを生成してください。 エクササイズ 3: Rails プロジェクトで生成されたコードをテストし、期待されるモデルを作成することを確認してください。 Checklist for Further Learning 生成されたコードは、与えられた例を正確に反映し、適切なコードを作成していますか?</description></item></channel></rss>