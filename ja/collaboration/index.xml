<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Collaborations on GitHub Copilot Patterns &amp; Exercises</title><link>/ja/collaboration/</link><description>Recent content in Collaborations on GitHub Copilot Patterns &amp; Exercises</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="/ja/collaboration/index.xml" rel="self" type="application/rss+xml"/><item><title>AIフレンドリーなドキュメンテーション</title><link>/ja/collaboration/ai-friendly-documentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/collaboration/ai-friendly-documentation/</guid><description>AIフレンドリーなドキュメンテーション # Description # AI を用いたコーディング支援ツールである GitHub Copilotの時代には、テキストベースで AI が容易にアクセスできるドキュメントが重要です。AI の時代では、Infrastructure as Code、データベーステーブル仕様、テスト要件などのファイルは、即座に実際のコードに変換できる可能性を持っています。複雑なエクセル、パワーポイントファイル、PDF、画像形式ではなく、テキストベースのドキュメントによって AI があなたのコーディングを協力に支援することができるようにになります。
以下のファイルがテキストベースであるか確認します:
インフラストラクチャ定義 データベーステーブル定義 テスト仕様 Example # 例えば、以下のようなマークダウンで書かれたテーブルがある場合、GitHub Copilot はマイグレーションファイルのベースを提供します。
# | No. | Item Name | Type | Length | Decimal | Required | Primary Key | Remarks | # | --- | -------------------- | --------------------------- | ------ | ------- | -------- | ----------- | ---------------------- | # | 1 | pass_document_id | integer | | | Y | Y | Document ID | # | 2 | checkout_id | integer | | | Y | Y | Unique Serial Number | # | .</description></item><item><title>プロンプトとコード生成プロセスのコーチング</title><link>/ja/collaboration/coaching-on-prompts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/collaboration/coaching-on-prompts/</guid><description>プロンプトとコード生成プロセスのコーチング # {% hint style=&amp;ldquo;info&amp;rdquo; %} これは合理的に聞こえますが、体系的で確立されたパターンではありません。 {% endhint %}
Description # GitHub Copilot のような AIツールを使用すると、出力が整ったものに見えることがあります。レビュー時に完璧に見えるコードも、生成プロセスで非効率であったり、重要な部分が欠けていることがあるかもしれません。生成プロセスへのコーチングは、開発者が潜在的な問題を認識し、効率的かつ正確なコードを作成できるようにするために不可欠です。
現代のソフトウェア開発において、コーチングはレビュー以上のものです。ガイドし、インスピレーションを与え、改善する機会となります。 このパターンは、GitHub Copilot のような AIツールでのコード生成に使用されるプロンプトの品質に対する仲間へのコーチングを強調しています。コーチングではプロンプトだけでなく、生成プロセスの理解も高めることを目指します。
Example # 特定のタスクのコードを生成するプロンプトを作成したチームメートのシナリオを想像してみてください。あなたの役割は、プロンプトの明確さを向上させ、基礎となる生成プロセスを理解するためのコーチングを提供することです。
元のプロンプト:
&amp;#34;Create a function to find prime numbers within a range.&amp;#34; コーチング後のプロンプト:
&amp;#34;Develop a Python function that takes two integers as input and returns a list of prime numbers within that range. Ensure the function efficiently handles different ranges, including edge cases.&amp;#34; Exercise # エクササイズ 1: チームメンバーのプロンプトに対してコーチングをしてください。改善できる分野を特定し、生成プロセスに対する洞察を提供し、変更がなぜ有益であるかを説明してください。 エクササイズ 2: GitHub Copilot によって以前に生成されたコードスニペットを分析し、プロンプトと基礎となる生成プロセスの両方に焦点を当てます。それがより具体的で効率的になるようにコーチングを提供してください。 エクササイズ 3: 様々なプログラミングのシナリオに対して自分自身のプロンプトを作成する練習をしてください。プロンプトの品質とコード生成プロセスの理解の両方を強調して、仲間とコーチングを行ってください。 Checklist for Further Learning # 単なるレビューと、継続的な改善のためのコーチングとの違いを認識しましたか?</description></item></channel></rss>