<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Client-tips on GitHub Copilot Patterns &amp; Exercises</title><link>/ja/client-tips/</link><description>Recent content in Client-tips on GitHub Copilot Patterns &amp; Exercises</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="/ja/client-tips/index.xml" rel="self" type="application/rss+xml"/><item><title>Copilot スニペットハンドリング</title><link>/ja/client-tips/copilot-snippet-handling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/client-tips/copilot-snippet-handling/</guid><description>Copilot スニペットハンドリング {% hint style=&amp;ldquo;info&amp;rdquo; %} この情報は2023年8月現在のものですが、GitHub Copilotとその背後にあるLLMの進化に伴い、状況が変わる可能性があります。常にGitHubから最新の情報を得るようにしてください。 {% endhint %}
Description そして、GitHub Copilot は OpenAI の 大規模言語モデルを利用してコードを生成するため、トークンの数に制限があります。2023 年現在、GitHub Copilot はエディタで開いているコード全てを見ることができず、また AI もすべてのコードをトークンとして受け取るわけではありません。これは、ユーザーが GitHub Copilot に提供するコンテキストを慎重に制限する必要があることを意味しています。特筆すべきは、GitHub Copilot は外部リポジトリや GitHub.com / GitHub Enterprise Cloud に置かれたソースコードにはアクセスしていないということです。
GitHub Copilot が提案に使用するファイルは、主に現在開いているファイルとそれに隣接するタブファイル(基本的には同じファイル拡張子)です。 正確な提案をするためには、関連するファイルだけを開いておくことが不可欠です。 以下は、2023年8月時点のチェックリストです。 GitHub Copilot がスニペットとして含めるファイルの種類は将来変更される可能性がありますが、「不要なファイルを閉じる」などの実践は、GitHub Copilot を使用していない場合であっても、コーディングにプラスの影響を与える可能性があります。
参照する必要があるファイルを開く 不要なファイルを閉じる 参照したい 他の拡張子のファイル (例: .md, .csv) がある場合は、コピーしてコメントアウトする Example Pythonの関数を1つのタブで書いており、隣接するタブに似たような関数があるシナリオを考えてみましょう。GitHub Copilotはパターンを認識し、改善の提案を行うことができます。
# タブ 1 (隣接) def add_numbers(a, b): return a + b # タブ 2 def subtract_numbers(a, b): return a - b answer = substruct_numbers(1, 2) + add_numbers( # &amp;lt;GitHub Copilot will suggest the code by reading the tab 1 &amp;gt; Exercise エクササイズ 1: 複数のタブを開いてGitHub Copilotを試し、提案がどのようにされるかを観察してみてください。 エクササイズ 2: 特定のタブを閉じて、その動作がどのように変わるかを確認してみてください。 エクササイズ 3: 複雑なプロジェクトで Copilot へ送信されるコードの文脈をを減らして実験してみてください。これが提供される提案にどのように影響するか観察してみましょう。 Checklist for Further Learning Copilot に必要なコンテキストを最適に与えるには、どのような戦略を採用することができますか?</description></item><item><title>GitHub Copilot ショートカット</title><link>/ja/client-tips/github-copilot-shortcuts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/client-tips/github-copilot-shortcuts/</guid><description>GitHub Copilot ショートカット Description GitHub Copilot は、開発者にコーディングプロセスを加速させるためのキーボードショートカットを提供します。これらのショートカットは、GitHub Copilot のAIによる提案とのナビゲーションやインタラクションを直感的かつ効率的に行うのに役立ちます。このパターンでは、GitHub Copilot を使用した迅速なコード開発に不可欠なキーボードショートカットを探求します。
Example 例えば、GitHub Copilot からの提案を受け入れるには、TAB を押すだけで良いです。以下はいくつかの重要なショートカットのリストです:
提案を受け入れる: TAB 提案を拒否する: Esc 複数の提案を表示する: Ctrl + Enter 単語レベルで受け入れる: Ctrl + → 次の提案を見る: Alt + ] 前の提案を見る: Alt + [ インライン提案をトリガーする: Alt + / Labs 機能リストを表示する: Ctrl + Shift + Alt + e サイドバーを切り替える: Ctrl + Shift + a Exercise エクササイズ 1: 現在のプロジェクトで TAB を使って GitHub Copilot の提案を受け入れてみてください。 エクササイズ 2: Esc を押して提案を拒否してみてください。何が起きますか? エクササイズ 3: Ctrl + Enter を使用して組み合わせた提案を確認します。それらを探索し、有用なものを特定してみてください。 エクササイズ 4: Alt + ] と Alt + [ を使用して提案をナビゲートしてみてください。コード選択プロセスにどう影響しますか?</description></item><item><title>定義に移動</title><link>/ja/client-tips/go-to-definition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/client-tips/go-to-definition/</guid><description>定義に移動 {% hint style=&amp;ldquo;info&amp;rdquo; %} 2023年8月現在、GitHub Copilotはすべてのコードベースを読み込むわけではないので、このテクニックが必要になる場面が出てくるでしょう。一方、近い将来、GitHub Copilotでこのテクニックが不要になる可能性もあり、このテクニックは非常に限定的なものになるかもしれません。 {% endhint %}
Description 複雑なコードベースで作業する際に、特定の関数やクラスの定義を見つけるためにファイル間をジャンプしたり、コードのレイヤーを検索するのは面倒です。&amp;ldquo;定義に移動&amp;rdquo; は、Visual Studio Code の便利な機能で、開発者が現在のファイル内の関数やクラスの定義にすばやく移動できるようにします。これによって生産性が向上するだけでなく、コード構造の理解も深まります。GitHub Copilot は開いているタブを読み取ります。&amp;ldquo;定義に移動&amp;rdquo; を使い実装を遡りながらファイルを開いていくことで、コードの奥深くにある定義に関連するコードスニペットも GitHub Copilot に渡すことができます。
Example Visual Studio Codeの &amp;ldquo;定義に移動&amp;rdquo; 機能を使用するには、調べたい関数やクラスを右クリックし、&amp;ldquo;定義に移動&amp;rdquo; を選択します。 ショートカット F12 も使用できます。以下のように行うことができます。
Exercise エクササイズ 1: Visual Studio Code で複数のファイルを持つプロジェクトを開き、クラスまたは関数定義へ &amp;ldquo;定義に移動&amp;rdquo; を使用して移動してみましょう。 エクササイズ 2: 変数、メソッド、クラスなど、異なる関数やクラスシンボルで &amp;ldquo;定義に移動&amp;rdquo; 機能の使用を練習して、その多様性を理解しましょう。 Checklist for Further Learning &amp;ldquo;定義に移動&amp;rdquo; 機能は、全体のコーディング体験をどのように向上させることができますか? &amp;ldquo;定義に移動&amp;rdquo; 機能と GitHub Copilot の統合は、コードナビゲーションと理解にどのようにさらに支援することができますか? この機能が開発ワークフローで特に有用である場合を特定できますか?</description></item><item><title>便利なファイルのピン留め</title><link>/ja/client-tips/pin-the-file-you-need/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/ja/client-tips/pin-the-file-you-need/</guid><description>便利なファイルのピン留め Description GitHub Copilot の性能は、提供されるコンテキストに依存します。GitHub Copilot はテキストの類似性で開いているタブを検索し、大規模言語モデルにスニペットを送信します。したがって、私たちは AI に提供したいコンテキストを慎重に考える必要があります。プログラミングでは、宣言ファイル（d.ts）、テストファイル、インターフェイスファイルなどが豊富なコンテキスト情報を含んでいます。Visual Studio Codeのピン留め機能を使用すると、これらのファイルを必要に応じて簡単にアクセスし、GitHub Copilotに効率的に情報を提供できます。
Example Visual Studio Codeでファイルをピン留めする方法は次のとおりです:
ピン留めしたいファイルを開きます。 ファイルタブ上で右クリックします。 コンテキストメニューから&amp;quot;Pin Tab&amp;quot;を選択します。 Exercise エクササイズ 1: 現在のプロジェクトで宣言ファイル（例: .d.tsファイル）をピン留めし、GitHub Copilotと一緒に作業する際にアクセスが容易になることに注目してください。 エクササイズ 2: 新しいインターフェイスファイルを作成し、ピン留めします。GitHub Copilotがこのファイルをどのように利用してより良いコード提案ができるのか探究してください。 エクササイズ 3: プロジェクト内で複数のテストファイルをピン留めし、Copilotの助けを借りて新しいテストケースを書く際にどのように助けになるか観察してください。 Checklist for Further Learning ピン留めするファイルの種類を変えると、GitHub Copilot との作業フローにどのような影響がありますか? Visual Studio Codeの他の機能は、GitHub Copilot との経験を向上させるためにどう活用できますか? 大量のピン留めファイルを管理して、常に GitHub Copilot に適切なコンテキストが利用可能であるようにするにはどうすればよいですか?</description></item></channel></rss>