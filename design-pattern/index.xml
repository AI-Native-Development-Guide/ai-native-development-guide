<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design-patterns on GitHub Copilot Patterns &amp; Exercises</title><link>/design-pattern/</link><description>Recent content in Design-patterns on GitHub Copilot Patterns &amp; Exercises</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/design-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>AI readable naming convention</title><link>/design-pattern/ai-readable-naming-convention/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/design-pattern/ai-readable-naming-convention/</guid><description>AI readable naming convention Description The AI readable naming convention focuses on the way we name variables and functions in our code to make them more readable by AI tools like GitHub Copilot. By avoiding generic and common programming names and embracing specific, descriptive names, we create code that both human developers and AI models which powers Copilot, can easily comprehend.
For example, an engineer creating a library system may use generic words such as &amp;ldquo;dictionary&amp;rdquo;, &amp;ldquo;library&amp;rdquo;, and &amp;ldquo;stack&amp;rdquo; for system variable names and function names.</description></item><item><title>Consistent coding style</title><link>/design-pattern/consistent-coding-style/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/design-pattern/consistent-coding-style/</guid><description>Consistent coding style Description Consistent coding style is crucial in software development, as it not only enhances code readability but also leads to better suggestions from GitHub Copilot. Indentation, tabs, naming conventions, comment writing, language-specific abbreviations, and many other areas of coding style. By adhering to a uniform coding style and pattern, developers find it easier to follow excellent coding practices.
Example Here&amp;rsquo;s a positive example of using clear function names and following the codebase pattern using snake_case:</description></item><item><title>Context-less Architecture</title><link>/design-pattern/context-less-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/design-pattern/context-less-architecture/</guid><description>Context-less Architecture {% hint style=&amp;ldquo;info&amp;rdquo; %} Loosely coupled architectures themselves are also recommended in many cases, and this pattern is consistent with that idea. However, more discussion is needed to tie the context of AI Powered development to the broader architecture discussion and justify it. By all means, let the discussion begin. {% endhint %}
Description Contextless architecture is a design pattern that limits coding to smaller, well-defined contexts within a system.</description></item><item><title>Eliminating a tiny OSS dependency</title><link>/design-pattern/eliminating-a-tiny-oss-dependency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/design-pattern/eliminating-a-tiny-oss-dependency/</guid><description>Eliminating a tiny OSS dependency {% hint style=&amp;ldquo;info&amp;rdquo; %} This may be of limited applicability. As more cases are discovered, this maturity level will increase. {% endhint %}
Description Do you know about the left-pad issue? In 2016, the left-pad library was suspended from npm, causing well-known libraries that depended on it to cease working. left-pad is a simple JavaScript library that only fills the left side of a string with a specified number of characters, or spaces if not specified.</description></item><item><title>High-level Architecture First</title><link>/design-pattern/high-level-architecture-first/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/design-pattern/high-level-architecture-first/</guid><description>High-level Architecture First Description When developing a complex system, it is common to dive into the details of the code and lose sight of the overall architecture of the program. When this happens repeatedly, GitHub Copilot also loses sight of its overall architecture. This can lead to misunderstandings and errors. By designing the high-level architecture of the program first and commenting on the function and purpose of each piece of code during development, GitHub Copilot can better understand the context and make more precise suggestions.</description></item><item><title>Working on small chunks</title><link>/design-pattern/working-on-small-chunk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/design-pattern/working-on-small-chunk/</guid><description>Working on Small Chunks Description Working on small chunks of code with less context can lead to improved Copilot&amp;rsquo;s output. Imagine you&amp;rsquo;re building a complex application with several interconnected components. Instead of trying to generate everything in one go, you break down the task into smaller parts, providing a confined context for Copilot. This approach not only streamlines the development process but also enhances the quality of the generated code.</description></item></channel></rss>